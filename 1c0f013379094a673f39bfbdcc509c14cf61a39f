{
  "comments": [
    {
      "key": {
        "uuid": "076564d6_695a19e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-19T18:29:52Z",
      "side": 1,
      "message": "should this list be in a file instead? (doesn\u0027t bugreport/dumpstate have a similar list?)",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 19,
        "endChar": 0
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ebe348d_9e078192",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-21T22:02:00Z",
      "side": 1,
      "message": "Nit: just make a regular array. That way, we don\u0027t create a static constructor and the data can just live in .data.",
      "range": {
        "startLine": 67,
        "startChar": 18,
        "endLine": 67,
        "endChar": 21
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3a24c61_ca9c4272",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1342419
      },
      "writtenOn": "2018-09-25T08:57:40Z",
      "side": 1,
      "message": "OK. I got it.\nI will change to char pointer array without STL components.",
      "parentUuid": "0ebe348d_9e078192",
      "range": {
        "startLine": 67,
        "startChar": 18,
        "endLine": 67,
        "endChar": 21
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06897ea3_ff0692b0",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-25T18:23:03Z",
      "side": 1,
      "message": "std::array would be fine too.",
      "parentUuid": "b3a24c61_ca9c4272",
      "range": {
        "startLine": 67,
        "startChar": 18,
        "endLine": 67,
        "endChar": 21
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8068e41d_e1a93925",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-09-19T19:55:16Z",
      "side": 1,
      "message": "This seems like a security issue. If you name your process with one of these names, you force the code down a different path.\n\nWouldn\u0027t it be better to verify that the exact command-line executable? Then you wouldn\u0027t even need to do this trim at all.",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e204b19_fa5a2c8c",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-21T22:02:00Z",
      "side": 1,
      "message": "I agree. FWIW, what I really want is a prctl command that tells the kernel to panic if the current process ever dies. In the meantime, yes, we do need more robust verification of process identity.",
      "parentUuid": "8068e41d_e1a93925",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c2ab76_3bc6d087",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1342419
      },
      "writtenOn": "2018-09-25T08:57:40Z",
      "side": 1,
      "message": "Here process_name is from /proc/\u003cpid\u003e/cmdline and it includes the path and delimited params.\nI would like to strip them and take out exact command name(\u003dargv[0]) as process name.\nDo you mean you have any security concern for this?\nIf I could get exact process name by other way, please let me know.",
      "parentUuid": "8e204b19_fa5a2c8c",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b902d1bd_a0db8577",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-25T18:14:43Z",
      "side": 1,
      "message": "/proc/pid/cmdline is under process control. An application can set it to whatever it wants, then crash, and bring down the system with it. ISTM readlink on /proc/pid/exe and matching the whole resulting path against the whitelist would be more robust.",
      "parentUuid": "53c2ab76_3bc6d087",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76c1a1b3_a9b33dfb",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-25T18:23:03Z",
      "side": 1,
      "message": "Actually, I don\u0027t think that\u0027s sufficient either. As a normal user, can just run one of these special processes yourself, make it crash somehow (external signal, LD_PRELOAD, etc.) and then get debuggerd to notice, I think. You could check UIDs too, but this approach still strikes me as fragile.\n\nHow about another approach? init already has code that reacts specially to crashing of certain system services [1]. Instead of having debuggerd initiate a system restart, why not add that logic to init? You could have init call sync(2) for extra durability. Since init actually wait(2)s on its children, it knows all about their identity.\n\n[1] http://cs/android/system/core/init/README.md?l\u003d190\u0026rcl\u003dc7d95740f2f749bd28c4ecd55f8cf9749f692549",
      "parentUuid": "b902d1bd_a0db8577",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "195dc5a2_0c1b5c38",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-09-19T19:55:16Z",
      "side": 1,
      "message": "Why are you doing this? Down below you seem to have to handle this extra space in a weird way.",
      "range": {
        "startLine": 75,
        "startChar": 2,
        "endLine": 75,
        "endChar": 66
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d8c5f4_d33fa320",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-19T18:29:52Z",
      "side": 1,
      "message": "android::base::Basename?",
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e213efd_d0b808cd",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-19T18:29:52Z",
      "side": 1,
      "message": "android::base::Trim?",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 92,
        "endChar": 0
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fd50a9e_ac827f08",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-25T18:23:03Z",
      "side": 1,
      "message": "Nit: take a string_view by value if we\u0027re C++17.",
      "range": {
        "startLine": 96,
        "startChar": 32,
        "endLine": 96,
        "endChar": 63
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8623529f_40a4e00c",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-09-19T19:55:16Z",
      "side": 1,
      "message": "Does this do anything? It appears that fsync is used to flush data to disk in a way that guarantees it is present if the system crashes. It doesn\u0027t appear to apply in this situation.",
      "range": {
        "startLine": 637,
        "startChar": 2,
        "endLine": 637,
        "endChar": 23
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dda5c1f6_103e181e",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 1342419
      },
      "writtenOn": "2018-09-25T08:57:40Z",
      "side": 1,
      "message": "This is in order to guarantee that the tombstone is outputted completely before sysrq would be triggered. Without this, we found the tombstone was sometimes missing after rebooting in the test.",
      "parentUuid": "8623529f_40a4e00c",
      "range": {
        "startLine": 637,
        "startChar": 2,
        "endLine": 637,
        "endChar": 23
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ee1b761_e5a1acc3",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 652,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-09-19T19:55:16Z",
      "side": 1,
      "message": "Why is this sleep here?",
      "range": {
        "startLine": 652,
        "startChar": 5,
        "endLine": 652,
        "endChar": 16
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e96b6d08_fcecbac6",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 652,
      "author": {
        "id": 1342419
      },
      "writtenOn": "2018-09-25T08:57:40Z",
      "side": 1,
      "message": "We want crash_dump to wait here and not exit until sysrq trigger so that we don\u0027t loose useful debugging information  (like process information etc).\nThat\u0027s why we gave sleep here.",
      "parentUuid": "2ee1b761_e5a1acc3",
      "range": {
        "startLine": 652,
        "startChar": 5,
        "endLine": 652,
        "endChar": 16
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deddacbe_9aeec7d9",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 2
      },
      "lineNbr": 652,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-09-25T18:23:03Z",
      "side": 1,
      "message": "If you need persistence, use the necessary primitives (e.g., fsync on file, directory) instead of inserting an arbitrary sleep.",
      "parentUuid": "e96b6d08_fcecbac6",
      "range": {
        "startLine": 652,
        "startChar": 5,
        "endLine": 652,
        "endChar": 16
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e708a0e_9d6aed17",
        "filename": "debuggerd/tombstoned/tombstoned.cpp",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-19T18:29:52Z",
      "side": 1,
      "message": "android::base::WriteStringToFile",
      "range": {
        "startLine": 405,
        "startChar": 0,
        "endLine": 415,
        "endChar": 0
      },
      "revId": "1c0f013379094a673f39bfbdcc509c14cf61a39f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}