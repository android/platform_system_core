{
  "comments": [
    {
      "key": {
        "uuid": "149cbc21_774bb2be",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-03-28T16:49:21Z",
      "side": 1,
      "message": "when does this happen? just if you give us a bad fd? in which case should we just abort clearly?\n\nreturning -1 worries me. it\u0027s not mentioned in the doc comment, but even if it was --- folks who don\u0027t check will think they just got PROT_READ|PROT_WRITE|PROT_EXEC.\n\neasier and safer to just blow up?",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e530b68_b202926d",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2019-03-28T17:35:31Z",
      "side": 1,
      "message": "Good point. I\u0027m not a big fan of crashing the app for something as trivial (and I believe we do have at least one test that intentionally sends an invalid file descriptor to our Ashmem wrapper class, which might trigger this), but we could do that, or simply return 0, which would be at least consistent and slightly less error prone. Which one would you prefer?",
      "parentUuid": "149cbc21_774bb2be",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c89316bf_154879b0",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-03-28T17:38:42Z",
      "side": 1,
      "message": "I\u0027d say an error return is fine instead of abort but it needs to be documented, such as ashmem_get_size documenting it returns 0 if it\u0027s not a valid fd.",
      "parentUuid": "0e530b68_b202926d",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f893bef_3df66a9a",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2019-03-28T17:48:29Z",
      "side": 1,
      "message": "Actually, it looks like ashmem_get_size_region() already has an inconsistent behaviour in case of invalid file descriptor:\n\n- If memfd support is enabled, it returns an error code (-1)\n- Otherwise, it will crash the process due to the use of __ashmem_check_failure()\n\nSo I don\u0027t know what to think here??",
      "parentUuid": "c89316bf_154879b0",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78048f64_eebff412",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-03-28T17:57:17Z",
      "side": 1,
      "message": "Sorry I misspoke. ASharedMemory_getSize is documented to return 0 if it fails, which is handled in the NDK wrapper like so:\n\nsize_t ASharedMemory_getSize(int fd) {\n    return ashmem_valid(fd) ? ashmem_get_size_region(fd) : 0;\n}\n\nSo maybe ashmem_get_prot_region should be fatal similar to other ashmem functions, but the NDK method does an up-front \"is valid\" check and returns an error if it isn\u0027t valid.",
      "parentUuid": "2f893bef_3df66a9a",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a73f45_f841568a",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-03-28T18:08:56Z",
      "side": 1,
      "message": "as the person/team who ends up debugging most native issues, i\u0027d *much* rather fatal.\n\nfor me the only question is \"can this fail for no fault of the caller\u0027s?\". because then, obviously, we can\u0027t just abort. but if the only way for this to fail is a logic error in the caller (like them giving us a bad fd), we should definitely abort.\n\nwe\u0027re _still_ paying for places where old APIs aren\u0027t harsh enough for bad inputs, and we know that 99% of apps won\u0027t check for errors. (and here -1 is confusable with \"everything set\".)",
      "parentUuid": "78048f64_eebff412",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a0063df_f049ef5d",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-03-28T19:05:41Z",
      "side": 1,
      "message": "Why not just return PROT_NONE if the fcntl fails? Then, the caller can handle the issue if it is expecting certain PROT flags.\n\nAlso Ok with aborting on bad inputs. But John may have more of an idea about if that\u0027s too harsh. In the very least since that is consistent with ashmem, we should also do that for memfd.",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58bb1e0f_461437c3",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2019-03-28T19:28:33Z",
      "side": 1,
      "message": "Thanks, that makes sense. I\u0027ve updated the CLs to do the check in SharedMemory_getProt(), and fail consistently in ashmem_get_prot_region() *and* ashmem_get_size_region().",
      "parentUuid": "3a0063df_f049ef5d",
      "revId": "0473dea29183e82728221ca68b726c3d82d19000",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}