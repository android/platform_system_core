{
  "comments": [
    {
      "key": {
        "uuid": "89d994b6_78cea730",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T04:47:36Z",
      "side": 1,
      "message": "This is quite ugly. Maybe I should hide these args building details inside CgroupMap ?",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 408,
        "endChar": 0
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c19595a4_f9ebe9b9",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:49:06Z",
      "side": 1,
      "message": "What about storing them as a CgroupController::mount_cmd_ private attribute ?\n\nIn that case, something similar to this code could be moved into the ctro of that class.",
      "parentUuid": "89d994b6_78cea730",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 408,
        "endChar": 0
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d948cd84_e4bf6537",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "The thing is that this code is executed only in the init, so having this somewhere inside CgroupController which is used much more widely might be a waste. Let\u0027s wait for Tom to chime in.",
      "parentUuid": "c19595a4_f9ebe9b9",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 408,
        "endChar": 0
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eeddfd9_417fd9cb",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "I\u0027d keep all of this code in libprocessgroups and have init just call a function that handles all of this.  I think it only happens to be the case that init sets up these cgroups now, but I don\u0027t think it\u0027s totally unreasonable that this code may move in the future, and having it in the library would make that easier.  Plus it would be more easily tested if it were in that library and a test app would call it directly.\n\nBut most importantly, I think it\u0027s way overkill to use the init builtins and the action queue to handle all of this.  I think the code would be much more simple if you called mount(), chmod(), chown(), etc directly.  \n\nFor example, the mount builtin is just a wrapper around mount() with parsing for the mount options and support for loop back devices, neither of which you need.  Simply `mount(\"cgroup2\", \"none\", controller-\u003epath(), MS_NODEV | MS_NOEXEC | MS_NOSUID);` is roughly about all that you would need.  The mkdir / chown / chmod combo may be a little bit more, but it\u0027s still something that you can easily abstract into a \"CreateCgroup()\" function that sets all of those attributes.",
      "parentUuid": "d948cd84_e4bf6537",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 408,
        "endChar": 0
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c91538_33344b90",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Yeah, I agree that would be much cleaner but also will require to re-implement these builtin functions inside libprocessgroup. I was debating myself which way is better and went this way to minimize additional code that would require also additional testing for corner cases.\n\nWould it be ok to keep it here as the first respin? I\u0027m worried that testing the new implementation might take more time than I have right now.",
      "parentUuid": "3eeddfd9_417fd9cb",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 408,
        "endChar": 0
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c2dfd81_46e62a3b",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 414,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:49:06Z",
      "side": 1,
      "message": "This name sounds rather arbitrary, isn\u0027t it ?\n\nI guess you create it under /dev just because we have a tmpfs mounted there, isn\u0027t it?\n\nIn any case (not sure it\u0027s possible) why not storing it at top level, i.e. /dev/cgroups.rc ?",
      "range": {
        "startLine": 414,
        "startChar": 13,
        "endLine": 414,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eade47f1_7bcf6983",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 414,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Yes, /dev is the only tmpfs place I can have this file.\nHave to place it under a directory because of a weirdness in the selinux which would not correctly apply the permissions to a file that does not exist at boot time (cgroups.rc is a generated one) but will work correctly to files generated in a sub-directory. Don\u0027t completely understand why but was advised to use this trick.",
      "parentUuid": "9c2dfd81_46e62a3b",
      "range": {
        "startLine": 414,
        "startChar": 13,
        "endLine": 414,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29e283eb_40f2da3d",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 414,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Probably better /dev/cgroup or /dev/cgroup_info or something like that.  I don\u0027t like acronyms, especially at a top level like that.",
      "parentUuid": "eade47f1_7bcf6983",
      "range": {
        "startLine": 414,
        "startChar": 13,
        "endLine": 414,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93f57d8f_391b5871",
        "filename": "init/init.cpp",
        "patchSetId": 11
      },
      "lineNbr": 414,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Ok, will change to /dev/cgroup_info.",
      "parentUuid": "29e283eb_40f2da3d",
      "range": {
        "startLine": 414,
        "startChar": 13,
        "endLine": 414,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38bd0c46_09f98d54",
        "filename": "libprocessgroup/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Do you still need this or is it left over from before?  I think all of the references have been removed (except for the header inclusion, but I don\u0027t see anything using it).",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "015cf3e3_fd59eadb",
        "filename": "libprocessgroup/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "yeah, I think we don\u0027t need it anymore. Will check and remove.",
      "parentUuid": "38bd0c46_09f98d54",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d1f01b6_b470f2df",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "2019 + on the other files.",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32acc364_78c84b67",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Not used?",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8421b91_919c682a",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "32acc364_78c84b67",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8ba41b4_36602b6b",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Newline between the C and C++ includes.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d972c1a_559c3e7f",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "c8ba41b4_36602b6b",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5a0e11d_978ee7e4",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "The related header, so this one, should be the first include.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbec5304_975022fd",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "a5a0e11d_978ee7e4",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8da4ddec_97a266c6",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 56,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "Why not defining name_ and path_ as strings and use members initialization here for all the params?\n\nThis will also get rid of the CGROUP_{NAME,PATH}_BUF_SZ declarations.\n\nConsider that name_ is used only in:\n   CgroupController::GetProcessGroup\nwhere it\u0027s still possible to go with name_.c_str()\n\nWhile path_ in a couple of places but actually to initialize a string object.",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9104f3f5_c29b3e33",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 56,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "It\u0027s for the purposes of CgroupController serialization as is into tmpfs file so that other processes can mmap that file directly and use without deserializing into a different structure. The record for each CgroupController should should be a constant size.\nAs soon as I get some more time I will evaluate possibility of using protobufs to serialize/deserialize CgroupController records into cgroup.rc file, however such a change will affect only libprocessgroup as nothing uses CgroupController directly, so can be done later on.",
      "parentUuid": "8da4ddec_97a266c6",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567cd492_88b05cdd",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "Not sure about the assumptions / requirements we are (or should) set on how APIs such this one should be called.\n\nShould we not enforce that all Cgroup related paths starts with a \"/\", e.g.\n  \"/\", \"/cpuset\", \"/top-app\"\nare valid paths, while:\n  \"\", \"cpuset\" and \"top-app\"\nare not valid ?\n\nUnder that assumption, I think methods like this one can be simplified... for example we never need the check on empty and we can just do something like:\n\nIf we also defined path_ to be a string, this should just be:\n\n    std::string CgroupController::GetTasksFilePath(const std::string\u0026 path) const {    \n        if (version_ \u003d\u003d 1)\n            return path_.append(\"/\").append(path).append(CGROUP_TASKS_FILE)\n        return path_.append(\"/\").append(path).append(CGROUP_TASKS_FILE_V2)\n    }\n\nThoughts ?",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 63,
        "endChar": 33
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10ebe5be_e7dd1350",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "IMO the API currently quite simple. *path* can be either empty, in which case we get the root of the controller of non-empty, in which case it will be a subdirectory under the controller\u0027s root path.\npath_ in the current implementation can\u0027t be changed into std::string (See my previous comment). After trying protobufs that\u0027s a possibility.",
      "parentUuid": "567cd492_88b05cdd",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 63,
        "endChar": 33
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0e09834_4476ced4",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 84,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "nit: I think code conventions allows you to write just:\n\n    if (start_pos \u003d\u003d std::string::npos) return false;\n\nisn\u0027t it ?",
      "range": {
        "startLine": 82,
        "startChar": 40,
        "endLine": 84,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a4be173_8d645408",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 84,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Will check.",
      "parentUuid": "a0e09834_4476ced4",
      "range": {
        "startLine": 82,
        "startChar": 40,
        "endLine": 84,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71727798_22427ce5",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 84,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "It is allowed, but I personally still prefer always using the braces and lots of system/core does this.",
      "parentUuid": "5a4be173_8d645408",
      "range": {
        "startLine": 82,
        "startChar": 40,
        "endLine": 84,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30867cf5_a9d80e83",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 84,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Ok, will keep as is.",
      "parentUuid": "71727798_22427ce5",
      "range": {
        "startLine": 82,
        "startChar": 40,
        "endLine": 84,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7d33918_a16ba2e4",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "BTW: I think this and the above chunk could be replaced with something like:\n\n    string pattern \u003d StringPrintf(\".*:%s:(.*)\", name_.c_str();\n    std::regex mpoint_re(pattern);\n    std::smatch mpoint_match;\n    if (std::regex_search(content, std::regex(pattern), mpoint_re)) {\n        *group \u003d mpoint_match.str(1);\n        return true;\n    }\n    return false;",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 92,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d280c03a_320947b5",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Will try.",
      "parentUuid": "e7d33918_a16ba2e4",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 92,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e427d595_16fe90b1",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 137,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "nit: if (cg_file_data_) return true; ?",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 137,
        "endChar": 5
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92647641_8c55336b",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 141,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Probably better to have a more detailed error message here.  At the least include the function if you don\u0027t include more context about what is being opened.",
      "range": {
        "startLine": 141,
        "startChar": 23,
        "endLine": 141,
        "endChar": 39
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b42e5144_39de5eca",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 141,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Will expand.",
      "parentUuid": "92647641_8c55336b",
      "range": {
        "startLine": 141,
        "startChar": 23,
        "endLine": 141,
        "endChar": 39
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d423a181_669523e2",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "Should we call this at the end of CgroupMap::WriteRcFile() ?\n\nI think it could be convenient to log on console the cgroups configuration in use... but not sure there are policies/conventions on how much we can be verbose. Maybe we can use an higher verbosity level for the report at boot time?\n\nIn that case we can probably pass in the level as a parameter for this call.\n\nToughs ?",
      "range": {
        "startLine": 165,
        "startChar": 16,
        "endLine": 165,
        "endChar": 21
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0ccb12_ffffa04c",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "That\u0027s how I use it for debugging but it would be too chatty to stay like that.",
      "parentUuid": "d423a181_669523e2",
      "range": {
        "startLine": 165,
        "startChar": 16,
        "endLine": 165,
        "endChar": 21
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0d91453_29bc5779",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 221,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "Should not we check this one somewhere also from CgroupMap::ReadDescriptors() ?",
      "range": {
        "startLine": 221,
        "startChar": 18,
        "endLine": 221,
        "endChar": 47
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31e179b_34618974",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 221,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "True. Will add.",
      "parentUuid": "d0d91453_29bc5779",
      "range": {
        "startLine": 221,
        "startChar": 18,
        "endLine": 221,
        "endChar": 47
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d531721_056e09d2",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "nit: if (!cg_file_data_) return nullptr; ?",
      "range": {
        "startLine": 241,
        "startChar": 4,
        "endLine": 241,
        "endChar": 23
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d064312_8508ff89",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 245,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "Not sure to get what\u0027s this +1 for... :/",
      "range": {
        "startLine": 245,
        "startChar": 69,
        "endLine": 245,
        "endChar": 72
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1c661a_5c4327bf",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 245,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "We skip the file header. Will add a comment.",
      "parentUuid": "2d064312_8508ff89",
      "range": {
        "startLine": 245,
        "startChar": 69,
        "endLine": 245,
        "endChar": 72
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f9278d_50760fd2",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 251,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "nit: empty line before this ?",
      "range": {
        "startLine": 251,
        "startChar": 3,
        "endLine": 251,
        "endChar": 18
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b33634_391458cb",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 11
      },
      "lineNbr": 251,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "will add.",
      "parentUuid": "a2f9278d_50760fd2",
      "range": {
        "startLine": 251,
        "startChar": 3,
        "endLine": 251,
        "endChar": 18
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6caecf16_1c36a481",
        "filename": "libprocessgroup/include/processgroup/cgroup_map.h",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T15:42:18Z",
      "side": 1,
      "message": "nit: put this API before or after the to \"*FilePath\" APIs ?\n\nmaybe: s/GetProcessGroup/GetTaskGroup/... in general we can (will) use this API also to get the group containing a single task, isn\u0027t it ?",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 60
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15163c6f_94492a36",
        "filename": "libprocessgroup/include/processgroup/cgroup_map.h",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "I see. Yes, will rearrange and rename.",
      "parentUuid": "6caecf16_1c36a481",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 60
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0db9e48_050831a5",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "I\u0027d either\n\n1) skip the path nullptr check entirely and assume that it is not an optional parameter.\nor\n2) return true if controller !\u003d nullptr and path \u003d\u003d nullptr.  Meaning that path is an optional parameter, and users of this function can query whether or not a cgroup exists without necessarily asking for its path to be returned.\n\nSame for the below functions.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfb9cc6f_701dacd8",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Good point. Will implement #2.",
      "parentUuid": "e0db9e48_050831a5",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bf32103_ae42e3a8",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T14:24:23Z",
      "side": 1,
      "message": "Callers of this API are forced to build a vector in place:\n\n   SetTaskProfiles(tid, std::vector\u003cstd::string\u003e{\"TimerSlackNormal\"});\n\nmost of the times just to pass in one profile name.\n\nSince we are not really using a strong type to do compile time checks,\nperhaps we can further relax the API by allowing users to pass in a\nsimple comma separated list of profiles, e.g.\n\n   SetTaskProfiles(tid, \"Profile1, Profile2\");\n\nThen we can use something like:\n\n    int SetProcessProfiles(uid_t uid, pid_t pid, string profiles) {\n        const TaskProfiles\u0026 tp \u003d TaskProfiles::GetInstance();\n\tstring::size_type i \u003d 0, j;\n\tstring separator(\",\");\n\tstring profile_name;\n\tbool done \u003d false;\n\n\t// Profile names cannot have spaces: bulk remove them\n\tprofiles \u003d regex_replace(profiles,std::regex(\"[ ]*\"), \"\");\n\tdo {\n\t\tj \u003d profiles.find(separator, i);\n\t\tif (j \u003d\u003d string::npos) {\n\t\t\tj \u003d profiles.length();\n\t\t\tdone \u003d true;\n\t\t}\n\t\tprofile_name \u003d profiles.substr(i, j-i);\n\t\ti \u003d j+1;\n\n                // Lookup required profile\n                auto* profile \u003d tp.GetProfile(profile_name);\n\t\tif (profile \u003d\u003d nullptr) {\n                    PLOG(WARNING) \u003c\u003c \"Failed to find \" \u003c\u003c name \u003c\u003c \"process profile\";\n                    continue;\n                }\n\n                // Activate required profile\n                if (profile-\u003eExecuteForProcess(uid, pid) !\u003d 0)\n                    PLOG(WARNING) \u003c\u003c \"Failed to apply \" \u003c\u003c name \u003c\u003c \" process profile\";\n\n\t} while (!done);\n    }\n\n\nThoughts ?",
      "range": {
        "startLine": 103,
        "startChar": 45,
        "endLine": 103,
        "endChar": 85
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05575464_dd24cde2",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Let\u0027s wait for Tom to chime in. Not sure what\u0027s more efficient a vector or regex parsing...",
      "parentUuid": "8bf32103_ae42e3a8",
      "range": {
        "startLine": 103,
        "startChar": 45,
        "endLine": 103,
        "endChar": 85
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260bd34c_1d1f285b",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-01-29T17:41:44Z",
      "side": 1,
      "message": "SetTaskProfiles(tid, {\"TimerSlackNormal\", \"Other Thing\", \"Thing3\"}) will also work fine in modern C++, and the construction cost of the vector is negligible.",
      "parentUuid": "05575464_dd24cde2",
      "range": {
        "startLine": 103,
        "startChar": 45,
        "endLine": 103,
        "endChar": 85
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56bdb545_fe54a6a3",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "+1 to the above.  I\u0027m okay with the vector and the initializer list syntax is plenty readable.  Less code overall too.",
      "parentUuid": "260bd34c_1d1f285b",
      "range": {
        "startLine": 103,
        "startChar": 45,
        "endLine": 103,
        "endChar": 85
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84af0394_81184bc7",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Why does this and the below function return and int?  It seems that they can\u0027t fail and they\u0027re not returning a count, so should they just return void?\n\nOr if they can fail, better to return bool.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5658136f_27bbfb84",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "84af0394_81184bc7",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a930684_800ff90f",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T14:24:23Z",
      "side": 1,
      "message": "If the above comment makes sense, we can do the same here.\n\nIn that case we should probably better move the tokenization code into a common private function which will then call either ExecuteForTask() or ExecuteForProcess() depending on an additional param.",
      "range": {
        "startLine": 119,
        "startChar": 29,
        "endLine": 119,
        "endChar": 69
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86389047_853c3b3f",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 74,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T17:05:50Z",
      "side": 1,
      "message": "Can we do here as below, i.e.\n\n   auto file \u003d StringPrintf(\"/proc/%d/timerslack_ns\", tid);\n\n?",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 74,
        "endChar": 62
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da77893_4e4d0e00",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 74,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Yes, I missed this one.",
      "parentUuid": "86389047_853c3b3f",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 74,
        "endChar": 62
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc554191_5bbd4c91",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T17:05:50Z",
      "side": 1,
      "message": "Why we need a local here, instead of just:\n\n   if (IsTimerSlackSupported(tid)) {\n\n?\n\nActually, we should probably better inline the code here to avoid to two string formats:\n\n    auto file \u003d StringPrintf(\"/proc/%d/timerslack_ns\", tid);\n    if (access(file.c_str(), W_OK) \u003d\u003d 0) {\n        if (!WriteStringToFile(std::to_string(slack_), file)) {\n        }\n    }\n\n... AFAIKS we don\u0027t use IsTimerSlackSupported() anywhere else and it\u0027s anyway private.",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 31
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74670b5b_a4bbe732",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "sys_supports_timerslack is static, so IsTimerSlackSupported() will be called only once AFAIU vs without it IsTimerSlackSupported() will be called each time even though kernel can\u0027t switch its support at runtime.",
      "parentUuid": "cc554191_5bbd4c91",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 31
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59f84301_e224dd3d",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T17:05:50Z",
      "side": 1,
      "message": "Maybe:\n\n   std::smatch match;\n   return std::regex_match(path, match, std::regex(\".*(\u003cuid\u003e|\u003cpid\u003e).*\"))\n\n?",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 121,
        "endChar": 100
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a04d14a2_552b8783",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "if this is more efficient then sure.",
      "parentUuid": "59f84301_e224dd3d",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 121,
        "endChar": 100
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa368c6_b3110f55",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "I\u0027d stick with the two .find calls.",
      "parentUuid": "a04d14a2_552b8783",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 121,
        "endChar": 100
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cf85c61_3685a7c8",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T17:05:50Z",
      "side": 1,
      "message": "Maybe we can save some columns by inverting these condition and returning on match, i.e.\n\n    if (IsAppDependentPath(path_)) {\n        fd_.reset(-2);\n        return;\n    }\n\n    std::string tasks_path \u003d c-\u003eGetTasksFilePath(p.c_str());\n    if (access(tasks_path.c_str(), W_OK) !\u003d 0) {\n        fd_.reset(-1);\n        return;\n    }\n\n    // And so on...\n\n\nThe same patter could be applied to some of the following APIs.",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 35
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "163c9c9d_4e14f25b",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "2cf85c61_3685a7c8",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 35
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53940aa8_da4ede35",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 149,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Same comment as Patrick\u0027s above here, better to return early if tid \u003c\u003d 0 then keep the rest a column less indented.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91be0beb_bd09afb2",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 149,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "will do.",
      "parentUuid": "53940aa8_da4ede35",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e2ab325_3602d55f",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-29T18:34:25Z",
      "side": 1,
      "message": "Why does this return int, when others return bool, especially given that this seems to be just returning true/false.  Better to consistently use bool.",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd9fda43_39f5ec8b",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T19:30:15Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "5e2ab325_3602d55f",
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b45df1a_88f1a9cb",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-29T17:05:50Z",
      "side": 1,
      "message": "s/ProfileElement/ProfileAction/ ?",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14f28b3f_1163c238",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-29T17:27:00Z",
      "side": 1,
      "message": "Will rename.",
      "parentUuid": "6b45df1a_88f1a9cb",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "19e79cc03761ca7d61137fa90a5a2f2e4ccce31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}