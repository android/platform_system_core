{
  "comments": [
    {
      "key": {
        "uuid": "105597e0_064bbc1c",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1216,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T13:02:09Z",
      "side": 1,
      "message": "As an alternative you can use std::filesystem, which provides a saner API. https://en.cppreference.com/w/cpp/filesystem",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 80
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a82352db_db23b96a",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1216,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:23:41Z",
      "side": 1,
      "message": "std::filesystem is still iffy.  It relies sort of heavily on exceptions; even with the \u0027ec\u0027 versions, this:\n\nstd::error_code ec\nfor (auto\u0026 de : std::filesystem::directory_iterator(\"/apex\", ec)) {\n  ...\n}\n\ncan throw, since operator++() can throw and it\u0027s hidden in the range based for loop (https://en.cppreference.com/w/cpp/filesystem/directory_iterator/increment).\n\nIf we do use it here, maybe we finally admit try using exceptions here?  Otherwise, the code doesn\u0027t look much better than the readdir code unfortunately.",
      "parentUuid": "105597e0_064bbc1c",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 80
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84758518_0769ecd7",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1216,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T15:30:56Z",
      "side": 1,
      "message": "We are using noexcept overrides of std::filesystem in apexd. The only big annoyance so far is the operator++ you mentioned. I was thinking on providing a noexcept wrapper for it, but never had time for it. If there are more places in the codebase that would like to use std::filesystem, but aren\u0027t using it because of things like operator++, then maybe we can have a common library to have noexcept versions? Or try to propose changes to the next standard? :)",
      "parentUuid": "a82352db_db23b96a",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 80
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "583b94e0_6544b998",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1216,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:46:30Z",
      "side": 1,
      "message": "That\u0027d be somewhat ironic to have a wrapper library on top of a wrapper library.  \n\nIf you\u0027re happy with the \u0027ec\u0027 versions even with the increment then feel free to use it.  I might just be too accustomed to readdir().",
      "parentUuid": "84758518_0769ecd7",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 80
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1735d957_6dfc9d30",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1216,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-11-20T15:53:03Z",
      "side": 1,
      "message": "yeah, written correctly opendir() is fine. see https://cs.corp.google.com/android/system/core/init/init.cpp?q\u003dopendir+file:system/core\u0026g\u003d0\u0026l\u003d421 for an example.\n\nthe need to say .increment() (and the difficulty of remembering to always use the std::error_code variants of calls, and not having compiler checking for that) seems to make the std::filesystem code in apexd a wash: https://cs.corp.google.com/android/system/apex/apexd/apexd_utils.h?type\u003dcs\u0026q\u003ddirectory_iter+file:apexd\u0026g\u003d0\u0026l\u003d94\n\n(but i\u0027m happy to enable more use of exceptions, and agree that the `for (auto...` code is much better than either of these.)",
      "parentUuid": "583b94e0_6544b998",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 80
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5894e7d6_8f71a0a2",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1218,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T13:02:09Z",
      "side": 1,
      "message": "nit: ErrnoError",
      "range": {
        "startLine": 1218,
        "startChar": 15,
        "endLine": 1218,
        "endChar": 20
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce2f101c_fc546c5a",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1225,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T13:02:09Z",
      "side": 1,
      "message": "nit: ErrnoError",
      "range": {
        "startLine": 1225,
        "startChar": 23,
        "endLine": 1225,
        "endChar": 28
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d66571b6_b57914bb",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T13:02:09Z",
      "side": 1,
      "message": "Doesn\u0027t this mean that there is nothing more to read, and you need to break from the cycle?",
      "range": {
        "startLine": 1227,
        "startChar": 11,
        "endLine": 1227,
        "endChar": 54
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51f2a2f1_2922818e",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:23:41Z",
      "side": 1,
      "message": "+1 this isn\u0027t an error, it\u0027s the expected behavior.",
      "parentUuid": "d66571b6_b57914bb",
      "range": {
        "startLine": 1227,
        "startChar": 11,
        "endLine": 1227,
        "endChar": 54
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b054e50_34c76bf3",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1237,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:23:41Z",
      "side": 1,
      "message": "Are we ever going to have names that begin with a single \u0027.\u0027 ?  Assuming not, you can simplify this and just check the first character.",
      "range": {
        "startLine": 1233,
        "startChar": 0,
        "endLine": 1237,
        "endChar": 9
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4372928c_6fadc915",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1240,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2019-11-20T13:02:09Z",
      "side": 1,
      "message": "Does it need to be world-readable/writable/executable?",
      "range": {
        "startLine": 1240,
        "startChar": 61,
        "endLine": 1240,
        "endChar": 65
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "582767cb_6d3b432e",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1240,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:23:41Z",
      "side": 1,
      "message": "Should we specify users/groups here somehow too?  Otherwise these will end up root/root.\n\nShould we specify any encryption settings via FscryptSetDirectoryPolicy()?  Or is that not needed until the user specific versions of these?",
      "parentUuid": "4372928c_6fadc915",
      "range": {
        "startLine": 1240,
        "startChar": 61,
        "endLine": 1240,
        "endChar": 65
      },
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "508c2459_774606ab",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1277,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-20T15:23:41Z",
      "side": 1,
      "message": "Is this only ever going to happen right after parse_apex_configs?  Can we combine these into a generic name that handles all of the things that init needs to do at this point for apex?\n\nIt\u0027s fine otherwise, but I don\u0027t want to create a bunch of apex only commands to init if fewer would suffice.",
      "revId": "4e08383a9a9f9a84ebbb27d323d43cb89538be1b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}