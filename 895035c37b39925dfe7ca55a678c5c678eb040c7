{
  "comments": [
    {
      "key": {
        "uuid": "4967e134_cae4803f",
        "filename": "debuggerd/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-04-04T00:22:28Z",
      "side": 1,
      "message": "move this comment down, and say what you need the scudo include directory for? (should the scudo include directory be exported by libscudo instead?)",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df984586_3ec0cb41",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-06T20:25:55Z",
      "side": 1,
      "message": "I don\u0027t think (volatile int) does anything here. If you want to prevent llvm from understanding the connection between the free and the later store, the pointer itself should be volatile.",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aef436fa_fee94ece",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-04-06T20:41:08Z",
      "side": 1,
      "message": "google benchmark has a DoNotOptimize function that launders the value through an asm volatile, maybe we should just add that as a dependency to use here?",
      "parentUuid": "df984586_3ec0cb41",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903fabc8_f130e24c",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-04-06T20:49:52Z",
      "side": 1,
      "message": "(yeah, or add [something like] it to android-base/test_utils.h --- cferris and i haven been threatening to do that for a long time, so useful is it.)",
      "parentUuid": "aef436fa_fee94ece",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da4acf4a_a4be35dc",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-04-07T19:05:54Z",
      "side": 1,
      "message": "It looks like (volatile int*) is necessary to keep the store around. With (int *volatile) it gets deleted, presumably because of dead-store elimination (although I also would have thought that volatile would stop it, maybe a bug?) (volatile int*) means that dead store elimination can\u0027t touch it.\n\nI also tried DoNotOptimize but it wasn\u0027t enough to keep the store either. So I left this as is.",
      "parentUuid": "df984586_3ec0cb41",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97901470_cc62adfe",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-06T20:25:55Z",
      "side": 1,
      "message": "what about the SEGV_ code?",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da73ad94_0bd4899e",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-04-07T19:05:54Z",
      "side": 1,
      "message": "I thought about checking the code here, but I figured that it would rely an implementation detail of scudo (e.g. scudo could unmap on free which would turn this into SEGV_MAPERR). Checking it on underflow also depends on an implementation detail (i.e. header prefix). I think it\u0027s also possible for overflow to result in SEGV_MAPERR right now if we get the last chunk in a mapping.\n\nMaybe it\u0027s not too bad though to check the code for UAF and underflow since we\u0027re already depending on scudo implementation details in tests elsewhere IIRC.",
      "parentUuid": "97901470_cc62adfe",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f86673d8_117a112c",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-06T20:25:55Z",
      "side": 1,
      "message": "Add a test with multiple causes.",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81ae7e7f_059bc87d",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-04-07T19:05:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f86673d8_117a112c",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0368d09c_590cadec",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-04-06T20:41:08Z",
      "side": 1,
      "message": "These get printed for `defined(__aarch64__) \u0026\u0026 !defined(ANDROID_EXPERIMENTAL_MTE)`, which is a bit misleading",
      "range": {
        "startLine": 383,
        "startChar": 5,
        "endLine": 385,
        "endChar": 0
      },
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51d7d315_0fa45e01",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-04-07T19:05:54Z",
      "side": 1,
      "message": "I\u0027ve changed it to \"Requires __aarch64__ + ANDROID_EXPERIMENTAL_MTE\".",
      "parentUuid": "0368d09c_590cadec",
      "range": {
        "startLine": 383,
        "startChar": 5,
        "endLine": 385,
        "endChar": 0
      },
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69ad1f9b_73488fbd",
        "filename": "libunwindstack/include/unwindstack/Memory.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-04-06T20:25:55Z",
      "side": 1,
      "message": "uint64_t addr",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f295d1e_cdd66560",
        "filename": "libunwindstack/include/unwindstack/Memory.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-04-07T19:05:54Z",
      "side": 1,
      "message": "This makes the compiler complain about an unused parameter.",
      "parentUuid": "69ad1f9b_73488fbd",
      "revId": "895035c37b39925dfe7ca55a678c5c678eb040c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}