{
  "comments": [
    {
      "key": {
        "uuid": "0fa21baa_429c9a40",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-03-21T05:04:00Z",
      "side": 1,
      "message": "We can\u0027t leak TaskProfiles every time TaskProfiles::GetInstance() is called. It\u0027s called lots of times. Maybe you meant to write:\n\nstatic auto* instance \u003d new TaskProfiles;\n\nto create it once, reuse it many times and never to delete?\n\nThe fact that it\u0027s racing during the process exit is surprising to me. AFAIK this is quite a standard way of creating \"Meyers Singletons\" in C++11. However I\u0027ll doubt myself and will consult with others tomorrow.\nThanks for bringing it up!",
      "range": {
        "startLine": 289,
        "startChar": 4,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "f18c110340058c04a4e2a3c5af0579b7fe34afaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f196808_a7c4e168",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2019-03-21T05:34:43Z",
      "side": 1,
      "message": "Oops, it was indeed meant to be static auto*.\n\nI think the general recommendation is that the program needs to arrange for the other threads to be destroyed before process exit in order to avoid this concurrent access. I didn\u0027t see any support for this in the class that manages binder thread pools (can\u0027t seem to find it now) though.",
      "parentUuid": "0fa21baa_429c9a40",
      "range": {
        "startLine": 289,
        "startChar": 4,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "f18c110340058c04a4e2a3c5af0579b7fe34afaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}