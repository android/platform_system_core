{
  "comments": [
    {
      "key": {
        "uuid": "e07a968c_a437cf7a",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-01-02T20:16:16Z",
      "side": 1,
      "message": "you need to handle concurrent access",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 26
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55e78ee0_70959fc5",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-01-02T20:27:24Z",
      "side": 1,
      "message": "Could you clarify the race scenario you have in mind? Are you referring to load/store tearing of the memfd_supported variable? This is an int and the access is 32-bit. 32-bit word loads and stores should not tear. OTOH if, more than one thread is racing, then doing the \"detection\" in parallel is safe. I don\u0027t mind synchronizing, but I wanted to know the race condition you are referring to so I know what to synchronize for. Thanks.",
      "parentUuid": "e07a968c_a437cf7a",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 26
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0258c0fd_1c9e9958",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-01-02T21:02:49Z",
      "side": 1,
      "message": "\u003e 32-bit word loads and stores should not tear. \n\nI\u0027m not sure this behavior for \"int\" is guaranteed in C++. Maybe use std::atomic\u003cint\u003e?",
      "parentUuid": "55e78ee0_70959fc5",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 26
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b46f371_aed8980e",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-01-02T23:01:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0258c0fd_1c9e9958",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 26
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "642ffce7_7978c9f1",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "check for vndk_version.empty() first?",
      "range": {
        "startLine": 83,
        "startChar": 20,
        "endLine": 83,
        "endChar": 26
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44c5ee85_d41eea2a",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 123,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "no errno check to see what the actual failure is here?",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 123,
        "endChar": 17
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f86d88a_e96f17a3",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-01-02T20:16:16Z",
      "side": 1,
      "message": "nit: don\u0027t use gotos in cpp code.",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 8
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d11bcfd4_a9e03ae3",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-01-02T20:27:24Z",
      "side": 1,
      "message": "I can see if there\u0027s a way to simplify, but the reason for the goto was because it makes the logic simple in the first place and is clean / easier to read. But if you have any suggestions how to restructure, let me know. Also, this function does not use any of the C++ features such as RAII, and the existing file doesn\u0027t really follow C++ coding conventions to begin with..",
      "parentUuid": "6f86d88a_e96f17a3",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 8
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffcd932c_6780c0d7",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-01-02T21:02:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d11bcfd4_a9e03ae3",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 8
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b8e8886_73ead03b",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "we need this, now.",
      "range": {
        "startLine": 240,
        "startChar": 4,
        "endLine": 243,
        "endChar": 7
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7578879_0279836a",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "(Orthgonal to ashmem_valid() function, but I think we can\u0027t be just do if \"kernel supports memfd check\".)\n\nIf the fd being passed into this library is really an ashmemfd coming from an app with TargetSDK \u003c Q, then it is still a \"valid\" fd. This will correctly return true, but we still need to know what fd it is (memfd / ashmem) in order to do the right thing in the library.\n\ne.g. the fd may get passed over binder and the caller is assuming it is ashmem and calls ashmem APIs here. We check for memfd support in kernel and if its there, we incorrectly treat that fd as memfd.\n\nI think what you need is to - \n\n1. Check if you have needed kernel support for memfd when creating regions and create memfd region if you do.\n2. In all APIs that accept \u0027fd\u0027 as an input parameter, you need to check if the \u0027fd\u0027 itself is memfd / ashmem, and act accordingly.",
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38d98b70_9076282f",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 268,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "no need?",
      "range": {
        "startLine": 268,
        "startChar": 0,
        "endLine": 268,
        "endChar": 90
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc0f7bc9_0268e0c3",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 288,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "avoid log spam, this will get call *a lot*",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 288,
        "endChar": 40
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "750e34d3_131eedd5",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 291,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 291,
        "endChar": 40
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74913251_25b14ccb",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 325,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "e.g. this check should not be \"has_memfd_support\", it should rather be is_memfd(fd), right?",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 325,
        "endChar": 30
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "262af267_7c6c1c44",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "just do \"int /* fd */\" instead ...\n\nhere and everywhere ..",
      "range": {
        "startLine": 333,
        "startChar": 25,
        "endLine": 333,
        "endChar": 35
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0403dc2a_1dcddb37",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 350,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "another case if \"is_memfd_fd(fd)?\" instead ..",
      "range": {
        "startLine": 350,
        "startChar": 8,
        "endLine": 350,
        "endChar": 25
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63cf866e_2e1291f5",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-23T06:12:25Z",
      "side": 1,
      "message": "no need?",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 75
      },
      "revId": "67ad270c994daf819e9bdfb60d93f687490de76c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}