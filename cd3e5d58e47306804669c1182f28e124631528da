{
  "comments": [
    {
      "key": {
        "uuid": "070c63b4_d91b89db",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "why always prefixed with \u0027a\u0027?",
      "range": {
        "startLine": 30,
        "startChar": 38,
        "endLine": 30,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2389cd51_5c2d1ee5",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Not sure how, but somehow I got the notion that an empty log tag would cause issues. Fixed.",
      "parentUuid": "070c63b4_d91b89db",
      "range": {
        "startLine": 30,
        "startChar": 38,
        "endLine": 30,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "399cf71e_a17ff1d1",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "should we also call these from stacks of various depths?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 95
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b80951a_9470942e",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T18:26:02Z",
      "side": 1,
      "message": "My thinking here is this code essentially just calls out to libunwdinstack under the hood, which is being covered as a separate target. The logic involved with allowing the fuzzer to generate stacks of various depths is fairly complex and feels a bit bigger than the scope of this fuzzer.",
      "parentUuid": "399cf71e_a17ff1d1",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 95
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5266da16_df8498e9",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-09T18:46:23Z",
      "side": 1,
      "message": "ack, then maybe the only other thing to do is also fuzz the weak utility symbols as well. They\u0027re used pretty frequently",
      "parentUuid": "8b80951a_9470942e",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 95
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "632297de_336868d1",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "If you\u0027re referring to logStack, stackToString, and getCurrent, I\u0027m already calling these (outside of stackToString).",
      "parentUuid": "5266da16_df8498e9",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 95
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b7b65c0_17f33b4e",
        "filename": "libutils/CallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-14T17:59:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "632297de_336868d1",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 95
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d75db4b1_9678b68f",
        "filename": "libutils/Looper_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "we could move it into its own file or a header.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 41
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "326a15d8_f7d03013",
        "filename": "libutils/Looper_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d75db4b1_9678b68f",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 41
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ffc4f6b_4d3253e6",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "style is pointer for modifiable argument",
      "range": {
        "startLine": 37,
        "startChar": 65,
        "endLine": 37,
        "endChar": 75
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8ccac59_b538119e",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "I tried that originally, however the call to \nandroid::LruCache\u003csize_t, size_t\u003e::Iterator iter(cache)\nrequires a android::LruCache\u003csize_t, size_t\u003e::Iterator iter(cache),\nmeaning that I can\u0027t pass a pointer there. Additionally, LruCache has disabled the copy constructor, preventing me from converting the pointer to a reference. Open to suggestions if you have a better way of handling this.",
      "parentUuid": "2ffc4f6b_4d3253e6",
      "range": {
        "startLine": 37,
        "startChar": 65,
        "endLine": 37,
        "endChar": 75
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d599a21e_fa77caeb",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-14T17:59:11Z",
      "side": 1,
      "message": "You should be able to ues (*cache) there then. We shouldn\u0027t create a new object/need to invoke the copy constructor.",
      "parentUuid": "a8ccac59_b538119e",
      "range": {
        "startLine": 37,
        "startChar": 65,
        "endLine": 37,
        "endChar": 75
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a41004bb_9824415d",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "curious why not do this based on remaining bytes as well? We could end up processing a lot of zeros here OR ignoring the end of the data",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3485fc4_8877b3c4",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "For the first case, I agree, will make sure we have enough remaining bytes. For the second case (not consuming all of the data), I am not as concerned. ~1000 operations seems like it should be sufficient to cover meaningful changes here",
      "parentUuid": "a41004bb_9824415d",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19defbfe_bc84b525",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a41004bb_9824415d",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "175e4822_6f12d6bd",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T20:32:27Z",
      "side": 1,
      "message": "Resolving this, as the remaining bytes is now factored in.",
      "parentUuid": "d3485fc4_8877b3c4",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65756078_139b6de9",
        "filename": "libutils/LruCache_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-14T17:59:11Z",
      "side": 1,
      "message": "why have opCount here at all?",
      "parentUuid": "175e4822_6f12d6bd",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13535fdf_f3269bf9",
        "filename": "libutils/Printer_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "we need to add an attribute here to make this a compiler error, but since it\u0027s varargs, this is bad usage",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 58
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb3dc0d6_db1b0206",
        "filename": "libutils/Printer_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-07T01:41:16Z",
      "side": 1,
      "message": "wait, i guess it also has __attribute__((format (printf, 2, 3)));\n\nSo, maybe since these aren\u0027t static strings, it assumes it\u0027s valid? Anyway, I would expect this to fail for sure.\n\nYou might try:\n\nprinter.printFormatLine(\"%s\", line.c_str());\n\nsince this delegates to a bionic function.",
      "parentUuid": "13535fdf_f3269bf9",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 58
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db122dc8_fb583a0f",
        "filename": "libutils/Printer_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb3dc0d6_db1b0206",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 58
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "140e210b_25b999c0",
        "filename": "libutils/Printer_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same, might not consume all of the data here either",
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd7f7f25_33c8d7e8",
        "filename": "libutils/Printer_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "140e210b_25b999c0",
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e731d6_4a7a7fdc",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "nullptr",
      "range": {
        "startLine": 46,
        "startChar": 34,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f8f38f6_1a530c7f",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "So it looks like native_handle returns a native_handle_type, which is not comparable to nullptr (which is of type nullptr_t).",
      "parentUuid": "b4e731d6_4a7a7fdc",
      "range": {
        "startLine": 46,
        "startChar": 34,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "244b270d_f4366814",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T20:32:27Z",
      "side": 1,
      "message": "Resolving, if you would prefer I change this to something else (or cast to nullptr type), feel free to re-open.",
      "parentUuid": "2f8f38f6_1a530c7f",
      "range": {
        "startLine": 46,
        "startChar": 34,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d59e99a_7b7488cb",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-14T17:59:11Z",
      "side": 1,
      "message": "sorry, I was thinking this was a different native handle type. I see now it is pthread_t. I can\u0027t seem to find any documentation indicating what 0 would mean here. Can you point me to why this check is being made?",
      "parentUuid": "244b270d_f4366814",
      "range": {
        "startLine": 46,
        "startChar": 34,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884cb38a_24176bac",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 60,
        "startChar": 13,
        "endLine": 60,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67356337_7aa8390c",
        "filename": "libutils/ProcessCallStack_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "884cb38a_24176bac",
      "range": {
        "startLine": 60,
        "startChar": 13,
        "endLine": 60,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84fb0a9c_3128ccae",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "if the lock succeeds, then this should also need unlocked like in L29? Or otherwise, why is the unlock needed in L29? Won\u0027t this deadlock?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 67
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f8f05c3_514b07e6",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T18:05:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84fb0a9c_3128ccae",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 67
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26470eb3_a3cb1c81",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "nit: unnecessary variable",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a02f91dc_137ee59c",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T18:05:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26470eb3_a3cb1c81",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf15cbb5_00515f6e",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b661f21f_b7e78d93",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T18:05:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf15cbb5_00515f6e",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d202983f_cf7e3463",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "seems strange to re-use operations since it gives the fuzzer less of an ability to control what is going on, and it could always double the input anyway",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf87dd34_9ff5e573",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T18:26:02Z",
      "side": 1,
      "message": "Hm. I\u0027m thinking about this fuzzer and it\u0027s starting to make a little less sense. It seems like the only operations are going to be locking/unlocking in some form, which will deadlock if not called in order, and don\u0027t take any input. Does it actually make sense to fuzz this class? If so, is there a better way to approach it? If not, I can just delete this fuzzer.",
      "parentUuid": "d202983f_cf7e3463",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6ba2e59_a939e8ea",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-09T18:46:23Z",
      "side": 1,
      "message": "Well, there are a couple of ways to encode this knowledge into the fuzzer. I think the most complete way would be to keep track of the state of the lock, unlocked or locked.\n\nThen you think of the graph with these two states and the following edges:\n- an operation from locked to locked state\n- an operation from unlocked to locked state\n- an operation from locked to unlocked state\n- an operation from unlocked to unlocked state\n\nThen the fuzzer would just travel around this graph randomly.",
      "parentUuid": "cf87dd34_9ff5e573",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d471a900_67a1c25f",
        "filename": "libutils/RWLock_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-10T18:05:47Z",
      "side": 1,
      "message": "I tried my best to do something similar, but it ended up boiling down to very basic logic. It looks like RWLock is pretty much just calling out to pthread* methods.",
      "parentUuid": "a6ba2e59_a939e8ea",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c959dd1b_3799a486",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "I don\u0027t think we should copy/paste this, since they are at least a little complicated. I wonder what hboehm thinks of exposing them. Hans?",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 42,
        "endChar": 1
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "696ec35c_9647de32",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T18:26:02Z",
      "side": 1,
      "message": "Agreed, it would be quite a bit more robust if this was publicly accessible, and I could see these functions actually being useful for standard library users.",
      "parentUuid": "c959dd1b_3799a486",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 42,
        "endChar": 1
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a2eff9_931f1c39",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "this can be nullptr btw",
      "range": {
        "startLine": 66,
        "startChar": 58,
        "endLine": 66,
        "endChar": 70
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c3eeb86_69926240",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T18:26:02Z",
      "side": 1,
      "message": "Ah, that\u0027s good to know, should make this simpler.",
      "parentUuid": "76a2eff9_931f1c39",
      "range": {
        "startLine": 66,
        "startChar": 58,
        "endLine": 66,
        "endChar": 70
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c0578d_61c574b3",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c3eeb86_69926240",
      "range": {
        "startLine": 66,
        "startChar": 58,
        "endLine": 66,
        "endChar": 70
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f3e0179_ea621db9",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "const\u0026",
      "range": {
        "startLine": 85,
        "startChar": 36,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9435c7_d786d333",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f3e0179_ea621db9",
      "range": {
        "startLine": 85,
        "startChar": 36,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0417de1d_f314cba1",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "should just be auto/uint8_t. Reference would be extra cost if not optimized away",
      "range": {
        "startLine": 86,
        "startChar": 9,
        "endLine": 86,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ee2b0a9_c5db1c83",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0417de1d_f314cba1",
      "range": {
        "startLine": 86,
        "startChar": 9,
        "endLine": 86,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0159fb61_15e286a6",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "Seems this is only ever set",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 21
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903e10b2_a16e5934",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Originally did this because RefBase expects a *bool, but just using \u0026false inline was not valid. I have changed this to be a bit cleaner by just passing false and having RefBaseSubclass pass a pointer to the bool to RefBase.",
      "parentUuid": "0159fb61_15e286a6",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 21
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e31dcc48_3385c4f8",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "If any of these are deleted, then val will be set?",
      "range": {
        "startLine": 100,
        "startChar": 57,
        "endLine": 100,
        "endChar": 61
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "013a9578_9ca0c334",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Removed val, no longer relevant",
      "parentUuid": "e31dcc48_3385c4f8",
      "range": {
        "startLine": 100,
        "startChar": 57,
        "endLine": 100,
        "endChar": 61
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffd875d2_858c7863",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "delete",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8f9f9fa_38f0f5b4",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffd875d2_858c7863",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed305463_bc3ebc9c",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "If this isn\u0027t true, it means we didn\u0027t start the thread, so there should be some other problem, right?",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "236d16f0_e33f1ec0",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T18:26:02Z",
      "side": 1,
      "message": "Was mainly meant as a sanity check, but I can remove it if you\u0027d prefer.",
      "parentUuid": "ed305463_bc3ebc9c",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "214ab887_b09a1370",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-09T18:46:23Z",
      "side": 1,
      "message": "Sanity check should assert rather than potentially lose coverage, but I think we get that behavior for free from join",
      "parentUuid": "236d16f0_e33f1ec0",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa374e42_2ec2dff3",
        "filename": "libutils/RefBase_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "214ab887_b09a1370",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 28
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ce9b0f7_977fab60",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcb8594b_488b07a7",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ce9b0f7_977fab60",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 39
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e113b9f_0d8899f2",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57e5ce66_0cca96f7",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e113b9f_0d8899f2",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f30af72_bb13e4fa",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-06T20:46:56Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d889d6e_a13857a0",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-07-09T22:52:36Z",
      "side": 1,
      "message": "So I\u0027m a bit confused here. The reason we\u0027re calling it % operations.size is to ensure \"it\" points to a valid index in operations. Otherwise, if libfuzzer provides larger or smaller values, they will cause an error in the fuzzer. I could simply ignore values outside of operations.size() if that\u0027s preferable, however that would mean a lot of values outside that range would effectively be wasted cycles. To be clear here, \"it\" is not incremental. It\u0027s a byte generated by the fuzzer.",
      "parentUuid": "5f30af72_bb13e4fa",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3a64ac6_6d5b9046",
        "filename": "libutils/StopWatch_fuzz.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-14T17:59:11Z",
      "side": 1,
      "message": "Sorry, I think I was confused because of the two different ways we\u0027re initializing the fuzzer (consuming one byte at a time vs ConsumeRemainingBytes).",
      "parentUuid": "6d889d6e_a13857a0",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "cd3e5d58e47306804669c1182f28e124631528da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}