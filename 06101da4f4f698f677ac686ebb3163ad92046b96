{
  "comments": [
    {
      "key": {
        "uuid": "01ddffa6_f1d7c3e5",
        "filename": "base/expected_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-05T23:54:45Z",
      "side": 1,
      "message": "Unrelated to this CL, but we might want tests for \u003d\u003d and !\u003d with different types, e.g. expected\u003cint, E\u003e and expected\u003cint32_t, E\u003e, or maybe even expected\u003cstd::string_view, E\u003e and expected\u003cstd::string, E\u003e.\n\nI\u0027m not quite sure how expected\u003cvoid, E\u003e compares with expected\u003cint, E\u003e.  It should fail of course, but does it instantiate the right templates and compile?  I don\u0027t think so currently.",
      "revId": "06101da4f4f698f677ac686ebb3163ad92046b96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2458897_1cb7efba",
        "filename": "base/expected_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-06T00:16:26Z",
      "side": 1,
      "message": "int \u003c-\u003e int32_t and string_view \u003c-\u003e string work. I\u0027ve added a test case for this.\n\nvoid \u003c-\u003e int didn\u0027t compile as you expected. I\u0027ve added two specialization for operator\u003d\u003d for the case where only one side is void.",
      "parentUuid": "01ddffa6_f1d7c3e5",
      "revId": "06101da4f4f698f677ac686ebb3163ad92046b96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}