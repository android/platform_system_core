{
  "comments": [
    {
      "key": {
        "uuid": "52ea4190_2b5d9900",
        "filename": "libutils/fuzzers/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "unused?",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26ad5c69_fc190456",
        "filename": "libutils/fuzzers/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52ea4190_2b5d9900",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "376c6421_0d3f6d7d",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "just put all the fuzzers in the same directory and have one Android.bp file?\n\n(personally, i\u0027d rather not have *any* subdirectory. just have x_fuzz.cpp next to x.cpp and x_test.cpp like we usually do.)",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fdbdf9e_90a0d12c",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "376c6421_0d3f6d7d",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef3dabf_c4d2ab8a",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fdbdf9e_90a0d12c",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b8590c0_32020b5e",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "(and then remove all the defaults duplication.)",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "886fed53_8b54f78a",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b8590c0_32020b5e",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e768a5_cb199b10",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": ".cpp",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d583fbe8_e32690da",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17e768a5_cb199b10",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6f0937_12bafc3c",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "d? (and elsewhere for convention here)",
      "range": {
        "startLine": 70,
        "startChar": 53,
        "endLine": 70,
        "endChar": 54
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c7196d1_ca6a6343",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "should we check that the size does not exceed a certain value here? I\u0027ve had problems where my fuzzers get caught because the infrastructure will construct a value way WAY too long, and so it\u0027ll timeout. Is that a concern here? (maybe not for bitset, but for some of the others)",
      "range": {
        "startLine": 70,
        "startChar": 66,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d81939_58f17210",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "I\u0027ve limited the number of operations and some lengths in places that make sense and haven\u0027t observed any issues related to that.",
      "parentUuid": "2c7196d1_ca6a6343",
      "range": {
        "startLine": 70,
        "startChar": 66,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e903f6_8ff71db5",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b6f0937_12bafc3c",
      "range": {
        "startLine": 70,
        "startChar": 53,
        "endLine": 70,
        "endChar": 54
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3204e6c5_3f6d93db",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "wow - very happy to learn about this class. I have been wasting some time :)",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 22
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c0f79b_dd87daf2",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "Can we avoid duplicating value? I think either we should ignore operations outside of that range OR construct operations as a list (e.g. std::vector\u003cstd::function\u003c...\u003e\u003e) so that the compiler can calculate this value for us.",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 71
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec19001_093359d5",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "if data provider has X bytes left, this will loop X times, but each call to the data provider consumes at least 5 bytes, meaning we should consume 5*X bytes. How does that work?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 73
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0de0cde1_0365f08e",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-13T21:37:22Z",
      "side": 1,
      "message": "I am not completely sure I am interpreting this right. If I understand what you\u0027re asking, it\u0027s why we limit this range here and have a switch statement in runOperationForBit. Is that correct? If so, I think the fuzzer would waste a lot of time grabbing random values out of range if we didn\u0027t do that. Also not positive I\u0027m interpreting this right, but if you\u0027re suggesting I use a vector of functions instead of the switch statement and simply grab an index for the vector, I think that would get complicated given the different number of arguments used for some functions.",
      "parentUuid": "c4c0f79b_dd87daf2",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 71
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76965a7e_6d7f3d37",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-13T21:37:22Z",
      "side": 1,
      "message": "Excellent point, I think that means we\u0027re getting a lot of zero values here. Will change the approach to account for that.",
      "parentUuid": "cec19001_093359d5",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 73
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9753d5a0_3c0dcac4",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:48:37Z",
      "side": 1,
      "message": "We shouldn\u0027t have coupling between a value here and the structure runOperationForBit, since it would be too easy to make the program inconsistent (if a new case is added above). It\u0027s fine to have the information \u002714\u0027 encoded multiple times in the program, but only if the compiler ensures it does not become inconsistent.\n\n\u003e I think the fuzzer would waste a lot of time grabbing random values out of range if we didn\u0027t do that\none option is using modulo\n\nAll cases are functions of T bs and uint32_t bit.",
      "parentUuid": "0de0cde1_0365f08e",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 71
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df7d5b5a_85c656aa",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76965a7e_6d7f3d37",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 73
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3123c182_f70ff637",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9753d5a0_3c0dcac4",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 71
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de1d21e8_f9981ffa",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "use android::base::TemporaryFile for temporary files. (for one thing, it\u0027ll clean up afterwards!)",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d537146d_1af7cb50",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de1d21e8_f9981ffa",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b43957e_d42f4bc5",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "the code that follows doesn\u0027t ensure that...",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f728d092_7788cb60",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b43957e_d42f4bc5",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91967ac3_0d9ad195",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "prefer to return in this case, if zero-length isn\u0027t supported?",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "494212ed_8e240d5d",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Added support for zero length",
      "parentUuid": "91967ac3_0d9ad195",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a879d149_d8dacecc",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "unused",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 37
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0d15c3f_a663f851",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a879d149_d8dacecc",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 37
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "658b9ff3_5a58007c",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "can we avoid this assumption?",
      "range": {
        "startLine": 56,
        "startChar": 71,
        "endLine": 56,
        "endChar": 72
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e91c952a_346ee8e8",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T19:24:12Z",
      "side": 1,
      "message": "Not really. Apparently getting enum length is not really possible in C++, at least from the research I\u0027ve done. It\u0027s possible we could use the last value to determine the length (DONTNEED), but if that is ever not the last item in the enum, or is explicitly assigned to an integer, then the length will be wrong.",
      "parentUuid": "658b9ff3_5a58007c",
      "range": {
        "startLine": 56,
        "startChar": 71,
        "endLine": 56,
        "endChar": 72
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c264872_65190aef",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-14T19:47:44Z",
      "side": 1,
      "message": "Since the enum isn\u0027t type-checked (enum class), and the implementation already checks this, we could pass arbitrary data here. That would increase coverage as well.",
      "parentUuid": "e91c952a_346ee8e8",
      "range": {
        "startLine": 56,
        "startChar": 71,
        "endLine": 56,
        "endChar": 72
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a66e53d_52e938e9",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c264872_65190aef",
      "range": {
        "startLine": 56,
        "startChar": 71,
        "endLine": 56,
        "endChar": 72
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aceed43b_0cfdba55",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "maybe we should prefer to check the size of vec/vec_two instead. I believe they will be truncated? L38/L39 use char instead of char16_t, not sure where this comes from",
      "range": {
        "startLine": 33,
        "startChar": 76,
        "endLine": 33,
        "endChar": 84
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa61e1ff_28f72d21",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T18:32:20Z",
      "side": 1,
      "message": "Agreed, will take a different approach. As for char16_t, probably a copy-paste artifact from String16 logic.",
      "parentUuid": "aceed43b_0cfdba55",
      "range": {
        "startLine": 33,
        "startChar": 76,
        "endLine": 33,
        "endChar": 84
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4feb60ca_76c9cf66",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa61e1ff_28f72d21",
      "range": {
        "startLine": 33,
        "startChar": 76,
        "endLine": 33,
        "endChar": 84
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "298257c5_466c5866",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "why not randomize order of operations like in bitset fuzzer?",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 78,
        "endChar": 50
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c54c3554_52a6a72d",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T18:32:20Z",
      "side": 1,
      "message": "Ack, will require restructuring but can do",
      "parentUuid": "298257c5_466c5866",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 78,
        "endChar": 50
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbf4787c_40f1df41",
        "filename": "libutils/fuzzers/string8/fuzz_string8.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "why not check sizes here, but check for String16?",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 90
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5018efb_2aad5a00",
        "filename": "libutils/fuzzers/string8/fuzz_string8.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T18:32:20Z",
      "side": 1,
      "message": "If I recall correctly, the size check in String16 is a bit of a relic from when I was consuming raw bytes instead of the null-terminated strings. Will remove it there. I am currently in the process of rewriting a ton of this logic to let the fuzzer determine order.",
      "parentUuid": "dbf4787c_40f1df41",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 90
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a9362a6_f09ea18d",
        "filename": "libutils/fuzzers/string8/fuzz_string8.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5018efb_2aad5a00",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 90
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f78f082c_c89f65cb",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "should be a few orders of magnitudes larger? There are probably some behaviors only critical \u003e length 32? maybe certain combinations of queries",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135ad799_7abdeb42",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T18:32:20Z",
      "side": 1,
      "message": "Didn\u0027t want to make it too huge, but I will kick it up. What seems like a good number? 50000?",
      "parentUuid": "f78f082c_c89f65cb",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22c09a89_dae0602e",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-14T19:22:43Z",
      "side": 1,
      "message": "Yeah, I think that should do it. We just want to make sure we are able to fully exercise sort/grow/shrink etc which are a bit more on the complicated side.",
      "parentUuid": "135ad799_7abdeb42",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0a908af_2a19a060",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T21:28:41Z",
      "side": 1,
      "message": "Ended up going with 5k as 50k made the fuzzer go incredibly slowly even on a powerful machine.",
      "parentUuid": "22c09a89_dae0602e",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c20fd09_7232fa6b",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1695385
      },
      "writtenOn": "2020-05-14T22:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0a908af_2a19a060",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}