{
  "comments": [
    {
      "key": {
        "uuid": "52ea4190_2b5d9900",
        "filename": "libutils/fuzzers/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "unused?",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "376c6421_0d3f6d7d",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "just put all the fuzzers in the same directory and have one Android.bp file?\n\n(personally, i\u0027d rather not have *any* subdirectory. just have x_fuzz.cpp next to x.cpp and x_test.cpp like we usually do.)",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fdbdf9e_90a0d12c",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "376c6421_0d3f6d7d",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b8590c0_32020b5e",
        "filename": "libutils/fuzzers/bitset/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "(and then remove all the defaults duplication.)",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e768a5_cb199b10",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": ".cpp",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b6f0937_12bafc3c",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "d? (and elsewhere for convention here)",
      "range": {
        "startLine": 70,
        "startChar": 53,
        "endLine": 70,
        "endChar": 54
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c7196d1_ca6a6343",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "should we check that the size does not exceed a certain value here? I\u0027ve had problems where my fuzzers get caught because the infrastructure will construct a value way WAY too long, and so it\u0027ll timeout. Is that a concern here? (maybe not for bitset, but for some of the others)",
      "range": {
        "startLine": 70,
        "startChar": 66,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3204e6c5_3f6d93db",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "wow - very happy to learn about this class. I have been wasting some time :)",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 22
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c0f79b_dd87daf2",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "Can we avoid duplicating value? I think either we should ignore operations outside of that range OR construct operations as a list (e.g. std::vector\u003cstd::function\u003c...\u003e\u003e) so that the compiler can calculate this value for us.",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 71
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec19001_093359d5",
        "filename": "libutils/fuzzers/bitset/fuzz_bitset.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "if data provider has X bytes left, this will loop X times, but each call to the data provider consumes at least 5 bytes, meaning we should consume 5*X bytes. How does that work?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 73
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de1d21e8_f9981ffa",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "use android::base::TemporaryFile for temporary files. (for one thing, it\u0027ll clean up afterwards!)",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b43957e_d42f4bc5",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-05-13T07:31:13Z",
      "side": 1,
      "message": "the code that follows doesn\u0027t ensure that...",
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91967ac3_0d9ad195",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "prefer to return in this case, if zero-length isn\u0027t supported?",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a879d149_d8dacecc",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "unused",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 37
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "658b9ff3_5a58007c",
        "filename": "libutils/fuzzers/filemap/fuzz_filemap.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "can we avoid this assumption?",
      "range": {
        "startLine": 56,
        "startChar": 71,
        "endLine": 56,
        "endChar": 72
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aceed43b_0cfdba55",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "maybe we should prefer to check the size of vec/vec_two instead. I believe they will be truncated? L38/L39 use char instead of char16_t, not sure where this comes from",
      "range": {
        "startLine": 33,
        "startChar": 76,
        "endLine": 33,
        "endChar": 84
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "298257c5_466c5866",
        "filename": "libutils/fuzzers/string16/fuzz_string16.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "why not randomize order of operations like in bitset fuzzer?",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 78,
        "endChar": 50
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf4787c_40f1df41",
        "filename": "libutils/fuzzers/string8/fuzz_string8.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "why not check sizes here, but check for String16?",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 90
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f78f082c_c89f65cb",
        "filename": "libutils/fuzzers/vector/fuzz_vector.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-05-13T21:02:10Z",
      "side": 1,
      "message": "should be a few orders of magnitudes larger? There are probably some behaviors only critical \u003e length 32? maybe certain combinations of queries",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 23
      },
      "revId": "87db303634aafb66624ab3bc0121e41d720bb886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}