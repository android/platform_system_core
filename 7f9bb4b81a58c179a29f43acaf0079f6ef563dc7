{
  "comments": [
    {
      "key": {
        "uuid": "d35c45ba_34abff4c",
        "filename": "debuggerd/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 326,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-03-17T21:45:39Z",
      "side": 1,
      "message": "Don\u0027t we also need \"//apex_available:platform\" for a crash_dump that\u0027s usable by the bootstrap linker?",
      "range": {
        "startLine": 326,
        "startChar": 0,
        "endLine": 326,
        "endChar": 30
      },
      "revId": "7f9bb4b81a58c179a29f43acaf0079f6ef563dc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf2c151_6dd08635",
        "filename": "debuggerd/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 326,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-03-17T21:50:49Z",
      "side": 1,
      "message": "As far as I know apex_available only controls build-time dependencies. The bootstrap linker should have no problem executing crash_dump at runtime.",
      "parentUuid": "d35c45ba_34abff4c",
      "range": {
        "startLine": 326,
        "startChar": 0,
        "endLine": 326,
        "endChar": 30
      },
      "revId": "7f9bb4b81a58c179a29f43acaf0079f6ef563dc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44582a9c_62138715",
        "filename": "liblog/liblog.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-17T21:54:14Z",
      "side": 1,
      "message": "+tomcherry for these.",
      "revId": "7f9bb4b81a58c179a29f43acaf0079f6ef563dc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5303c1d3_bf9abd62",
        "filename": "liblog/liblog.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-17T22:13:57Z",
      "side": 1,
      "message": "There are okay to add if we need them, but... I don\u0027t actually think that we do.  They code that uses them was added in aosp/94380, which provides support for dumping the event log, but actually dumping the event log was removed shortly after in aosp/95685, 6 years ago.\n\nUnless we believe that we need the event log in tombstones and want to restore capturing it, it\u0027d be better to remove the code than to mark these symbols as apex.",
      "parentUuid": "44582a9c_62138715",
      "revId": "7f9bb4b81a58c179a29f43acaf0079f6ef563dc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b05b0f8_462466ef",
        "filename": "liblog/liblog.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-17T22:34:10Z",
      "side": 1,
      "message": "(since it wasn\u0027t clear to me either, he\u0027s saying that we can remove\n\n    if (log_entry.id() \u003d\u003d LOG_ID_EVENTS) {\n      if (!g_eventTagMap) {\n        g_eventTagMap \u003d android_openEventTagMap(nullptr);\n      }\n      AndroidLogEntry e;\n      char buf[512];\n      if (android_log_processBinaryLogBuffer(\u0026log_entry.entry, \u0026e, g_eventTagMap, buf,\n                                             sizeof(buf)) \u003d\u003d 0) {\n        _LOG(log, logtype::LOGS, \"%s.%03d %5d %5d %c %-8.*s: %s\\n\", timeBuf,\n             log_entry.entry.nsec / 1000000, log_entry.entry.pid, log_entry.entry.tid, \u0027I\u0027\n,\n             (int)e.tagLen, e.tag, e.message);\n      }\n      continue;\n    }\n\nbecause that function is no longer called for a log where that would be true. if you\u0027re not comfortable removing that yourself in this change, let me know and i\u0027ll remove it and you can rebase on top of that :-) )",
      "parentUuid": "5303c1d3_bf9abd62",
      "revId": "7f9bb4b81a58c179a29f43acaf0079f6ef563dc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}