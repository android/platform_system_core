{
  "comments": [
    {
      "key": {
        "uuid": "6679ff49_6a003316",
        "filename": "libunwindstack/RegsArm64.cpp",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Is there any way to emulate this if you aren\u0027t on arm64?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27a9b13c_18114b00",
        "filename": "libunwindstack/RegsArm64.cpp",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Yes, with the pac_mask_ above. However, the mask has to be collected from the CPU where the stack was dumped, as it depends on its configuration.",
      "parentUuid": "6679ff49_6a003316",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b920295d_4fa0e0a1",
        "filename": "libunwindstack/RegsArm64.cpp",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-03T16:43:45Z",
      "side": 1,
      "message": "is that true in practice, or just in theory? in practice, won\u0027t any given OS have made a specific fixed choice of mask, so we\u0027ll know?",
      "parentUuid": "27a9b13c_18114b00",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25abcc4a_99f55e20",
        "filename": "libunwindstack/RegsArm64.cpp",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1490246
      },
      "writtenOn": "2020-02-03T17:14:12Z",
      "side": 1,
      "message": "In theory the PAC Mask is IMPDEF, thus defined by the CPU that implements it. In practice we don\u0027t really know as yet, however I would have said that a certain amount of standardisation is  probable. The problem here is that I wouldn\u0027t like to say we could rely on that at this point (no hardware)",
      "parentUuid": "b920295d_4fa0e0a1",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edbe00c4_430c2b13",
        "filename": "libunwindstack/RegsArm64.cpp",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-03T17:42:24Z",
      "side": 1,
      "message": "ah, i see. i suspect i heard someone say \"implementation defined\" and mistakenly assumed that was \"OS defined\", not \"hardware defined\".",
      "parentUuid": "25abcc4a_99f55e20",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "756ad545_4b440fb1",
        "filename": "libunwindstack/include/unwindstack/Regs.h",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Remove this, C++ doesn\u0027t require the void.",
      "range": {
        "startLine": 67,
        "startChar": 36,
        "endLine": 67,
        "endChar": 40
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4af112d0_1e0b1d56",
        "filename": "libunwindstack/include/unwindstack/Regs.h",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "756ad545_4b440fb1",
      "range": {
        "startLine": 67,
        "startChar": 36,
        "endLine": 67,
        "endChar": 40
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db49074a_013f8340",
        "filename": "libunwindstack/include/unwindstack/Regs.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Is there a reason this isn\u0027t being done in the Regs class? It\u0027s already impossible to create Reg object, so it doesn\u0027t seem to by anything.",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f3dbc7b_9eba2586",
        "filename": "libunwindstack/include/unwindstack/Regs.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db49074a_013f8340",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ebf0114_3c3bd335",
        "filename": "libunwindstack/include/unwindstack/RegsArm64.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 55,
        "startChar": 28,
        "endLine": 55,
        "endChar": 32
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77b90c40_6224dc99",
        "filename": "libunwindstack/include/unwindstack/RegsArm64.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ebf0114_3c3bd335",
      "range": {
        "startLine": 55,
        "startChar": 28,
        "endLine": 55,
        "endChar": 32
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3800c13_55891544",
        "filename": "libunwindstack/include/unwindstack/RegsArm64.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 22
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db98797b_5b96de24",
        "filename": "libunwindstack/include/unwindstack/RegsArm64.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3800c13_55891544",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 22
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1fc981e_59dd2807",
        "filename": "libunwindstack/tests/RegsFake.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "This won\u0027t be necessary if you push the definitions into the Reg class.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0c9949b_9bb65c39",
        "filename": "libunwindstack/tests/RegsFake.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1fc981e_59dd2807",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed515f29_923c3b17",
        "filename": "libunwindstack/tools/unwind_reg_info.cpp",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-01-31T20:41:45Z",
      "side": 1,
      "message": "Add a moniker like pseudo so that we know that this is a pseudo register.",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 17
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c8f381_7438e8fa",
        "filename": "libunwindstack/tools/unwind_reg_info.cpp",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1626440
      },
      "writtenOn": "2020-02-03T10:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed515f29_923c3b17",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 17
      },
      "revId": "723916baab42f9530db713d722cd032a7785db5d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}