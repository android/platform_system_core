{
  "comments": [
    {
      "key": {
        "uuid": "3c65464e_8633128e",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-08-13T18:37:26Z",
      "side": 1,
      "message": "nit: //",
      "range": {
        "startLine": 293,
        "startChar": 8,
        "endLine": 293,
        "endChar": 10
      },
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6601b706_5444c89c",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-08-20T21:32:40Z",
      "side": 1,
      "message": "why is it \"assumed\"? would there be a case where the sysfs node does not exist, but it is not unsupported?",
      "range": {
        "startLine": 293,
        "startChar": 39,
        "endLine": 293,
        "endChar": 57
      },
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8a4db10_a7785572",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1604091
      },
      "writtenOn": "2020-08-21T01:21:13Z",
      "side": 1,
      "message": "It\u0027s a semantic thing - you could interpret a missing sysfs node as unknown as well. For example, let\u0027s say the sysfs node disappeared at runtime after it existed.",
      "parentUuid": "6601b706_5444c89c",
      "range": {
        "startLine": 293,
        "startChar": 39,
        "endLine": 293,
        "endChar": 57
      },
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85c8a92e_1f232359",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-08-21T01:26:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c8a4db10_a7785572",
      "range": {
        "startLine": 293,
        "startChar": 39,
        "endLine": 293,
        "endChar": 57
      },
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1816506_594e094e",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-13T16:51:18Z",
      "side": 1,
      "message": "just make this the default in initHealthInfo instead?",
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "909ceca6_761a3929",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1604091
      },
      "writtenOn": "2020-08-13T21:28:24Z",
      "side": 1,
      "message": "Fair enough. I didn\u0027t notice initHealthInfo() was also called in updateValues()\n\nI wanted to follow the definition in the HAL (UNKNOWN if uninitialized)\n    /**\n     * Battery capacity level is unknown.\n     * Battery capacity level must be set to this value if and only if battery\n     * is not present or the battery capacity level is unknown/uninitialized.\n     */\n\nThe problem is that initHealthInfo() is both called in the constructor and in updateValues(). I\u0027m fine if we adopt the semantic that we assume UNSUPPORTED instead of UNKNOWN at initialization, but the caveat is that there\u0027s a risk that a phone might shutdown (if there\u0027s a race or a bug), as the battery level is initialized to 0% (and the check in BatteryService.java is level \u003d\u003d 0%). The idea is that we wouldn\u0027t assume UNSUPPORTED and act until we know the feature is actually UNSUPPORTED.\n\nAlternative; could also separate the assignments and initialize to UNKNOWN at constructor and set to UNSUPPORTED as default in updateValues().",
      "parentUuid": "e1816506_594e094e",
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d0e9e57_f5f58286",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-08-20T21:32:40Z",
      "side": 1,
      "message": "PS 2 doesn\u0027t seem to initialize the value to UNKNOWN at constructor, so what happens to the hypothetical case that you bring up?",
      "parentUuid": "909ceca6_761a3929",
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afb4731a_691c28a2",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1604091
      },
      "writtenOn": "2020-08-21T01:21:13Z",
      "side": 1,
      "message": "It\u0027s if framework were to read the values before updateValues(). However, the same problem exists in 2.0 and it would be a bug (the read should not happen)",
      "parentUuid": "1d0e9e57_f5f58286",
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd3b32e0_6bc1a1b7",
        "filename": "healthd/BatteryMonitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-08-21T01:26:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "afb4731a_691c28a2",
      "revId": "d346571d979263914c0e17e590a1f86b5737e124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}