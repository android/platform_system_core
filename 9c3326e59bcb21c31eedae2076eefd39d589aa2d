{
  "comments": [
    {
      "key": {
        "uuid": "f2ab4190_7c25dd13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-10T21:19:06Z",
      "side": 1,
      "message": "@smoreland now that it seems you\u0027re back, any thoughts?",
      "revId": "9c3326e59bcb21c31eedae2076eefd39d589aa2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14ddfb07_5cb6688a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-10T23:00:40Z",
      "side": 1,
      "message": "Before I post comments, are you encountering a need for this or is it just a good idea? Obviously it\u0027s a convenient feature.\n\nI ask this because this doesn\u0027t add any new ability to init, and it\u0027s therefore technically an unnecessary addition to the init API surface. An alternative would be to start every version (and this is technically possible to automatically generate). I\u0027m really hoping to see few if any new major versions added, and most interfaces to be written using AIDL, where major versions are expected to be much rarer.",
      "revId": "9c3326e59bcb21c31eedae2076eefd39d589aa2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57862032_a5f645dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-10T23:15:19Z",
      "side": 1,
      "message": "\u003e Before I post comments, are you encountering a need for this or is it just a good idea? Obviously it\u0027s a convenient feature.\n\nAs stated in my initial comment:\n\n\u003e The impetus for this was us trying to abstract service name revisions behind props, which we found not to be very elegant, see https://github.com/ix5/device-sony-common/commit/1a796b881adc5583d30dcbf2d7cd58966ad79f49\n\nSo more of a \"good idea\" than a dire need.\n \n\u003e I ask this because this doesn\u0027t add any new ability to init, and it\u0027s therefore technically an unnecessary addition to the init API surface. An alternative would be to start every version (and this is technically possible to automatically generate).\n\nYeah on reflection we might not want to introduce another verb into init language. Maybe using `interface_start` without any version information (i.e. `@1.1::IInterface`) internally triggers `interface_start_latest`, whereas `interface_start` with an exact fqname behaves just as before.\n\n\u003e I\u0027m really hoping to see few if any new major versions added, and most interfaces to be written using AIDL, where major versions are expected to be much rarer.\n\nAh, AIDL... still haven\u0027t fully understood why HIDL now is out of vogue and AIDL back as (s)AIDL again?\nWhy not just freeze a HIDL interface and commit to not uprev\u0027ing it, instead of introducing _yet_ another format?\nBut alas, you guys have to earn your keep somehow, I guess.",
      "parentUuid": "14ddfb07_5cb6688a",
      "revId": "9c3326e59bcb21c31eedae2076eefd39d589aa2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101b01d2_fc52e1c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-11T00:39:09Z",
      "side": 1,
      "message": "Sorry Felix, missed the original comment. Even though it\u0027s a good change, I would abandon/hold off, citing YAGNI. I\u0027m somewhat of a minimalist. You never know when real life usecases would imply slightly different semantics.\n\nFor AIDL vs HIDL, you can read a bit about it here and on related pages:\n\u003e https://source.android.com/devices/architecture/aidl/overview\n\nThe motivation is multifaceted:\n- AIDL versioning works in place (struct fields can be added and methods can be added *to the upstream interface*). So, it avoids the problem of a new library for every version, and it avoids a huge amount of boilerplate code. Lessons learned from maintaining HIDL were applied as much as possible to AIDL.\n- an interface can be written using AIDL, and the decision where to use it can be made later (AIDL can be used anywhere in Android now, vendor\u003c-\u003evendor, vendor\u003c-\u003esystem, etc, even apps can define custom AIDL interface to talk among themselves--although AIDL interfaces are not used as API). Sometimes it\u0027s not clear in an architecture where exactly the boundary should be frozen until later in development.\n- developers should need to learn fewer systems in order to be productive in Android\n- previously, if there was an AIDL interface that was needed by hardware, a clone of it would have to be recreated in HIDL (good luck cleaning up old clients). Now, it can work everywhere.\n\nThose are only some of the reasons, but AIDL is probably much better for this, than it would have been, and I believe its availability and use makes a lot of things better, even while we very very gradually move away from HIDL.\n\n\u003e commit to not uprev\u0027ing it\n\nWell, they certainly need upreving for new features, new standards. Android needs to evolve with time. It\u0027s highly frowned upon to uprve things for fun/without a motivation. If you only knew how many interfaces were prevented!\n\n\u003e But alas, you guys have to earn your keep somehow, I guess.\n\nI try, yo.",
      "parentUuid": "57862032_a5f645dc",
      "revId": "9c3326e59bcb21c31eedae2076eefd39d589aa2d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}