{
  "comments": [
    {
      "key": {
        "uuid": "2b214568_d43222e9",
        "filename": "libunwindstack/tests/fuzz/DexFilesFuzz.cpp",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-05-29T23:09:27Z",
      "side": 1,
      "message": "This doesn\u0027t match the current style.\n\nWe prefer, first libc headers, then c++ headers, then global headers, then local headers.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "72949dd3b1950d2b15b9b74835f7abfe3933436b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8913d1b_3943522a",
        "filename": "libunwindstack/tests/fuzz/DexFilesFuzz.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-05-29T23:09:27Z",
      "side": 1,
      "message": "Global nit, we prefer ptr_offset for variable names.",
      "range": {
        "startLine": 39,
        "startChar": 17,
        "endLine": 39,
        "endChar": 26
      },
      "revId": "72949dd3b1950d2b15b9b74835f7abfe3933436b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6669ac3_a74f66b9",
        "filename": "libunwindstack/tests/fuzz/MemoryFuzz.cpp",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-05-29T23:09:27Z",
      "side": 1,
      "message": "This should kMaxOperations to match the other constant names.",
      "range": {
        "startLine": 28,
        "startChar": 21,
        "endLine": 28,
        "endChar": 35
      },
      "revId": "72949dd3b1950d2b15b9b74835f7abfe3933436b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3533c128_ca3d7aa6",
        "filename": "libunwindstack/tests/fuzz/MemoryFuzz.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-05-29T23:09:27Z",
      "side": 1,
      "message": "Even though it\u0027s being included from another header, we prefer that all needed stl is included directly where it\u0027s used. This fixes any secondary problems of a header changing causing compiler breakages.",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 19
      },
      "revId": "72949dd3b1950d2b15b9b74835f7abfe3933436b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f360ebd_d89b7551",
        "filename": "libunwindstack/tests/fuzz/MemoryFuzz.cpp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2020-05-29T23:09:27Z",
      "side": 1,
      "message": "Did you mean to make \"out\" a single byte? The maxRead value will always be a single byte, so you are writing over this value.\n\nIf you allocate this value, you also need to take into account if maxRead is a large value and there is no way to allocate a buffer large enough.",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 45,
        "endChar": 44
      },
      "revId": "72949dd3b1950d2b15b9b74835f7abfe3933436b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}