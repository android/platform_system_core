{
  "comments": [
    {
      "key": {
        "uuid": "3f9ad09d_c8bc6654",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:18:05Z",
      "side": 1,
      "message": "We have small string optimization for libc++, right?  As far as I know, this means that there are 0 heap allocations for strings \u003c\u003d 12 bytes for 32 bit and \u003c\u003d 24 bytes for 64 bit.\n\nHow realistically inefficient is std::string then?  I checked my blueline and out of 810 properties, 733 are \u003c\u003d 12 bytes and 762 are \u003c\u003d 24 bytes.  Virtually all of the numbers are \u003c\u003d 12 bytes, and UINT64_MAX as a string is \u003c 24 bytes, so it\u0027s impossible on a 64 bit system to heap allocate reading a valid number with GetUintProperty() using std::string.\n\nI think, getting back to the comments from enh@ and the new readme: std::string references should still be preferred here as they\u0027re the safest and easiest to use and in a majority cases have no performance drag.  We can profile this further, but I don\u0027t think the comment itself is the direction we want to take this.",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "011d7488_aa1cef71",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-06T19:32:00Z",
      "side": 1,
      "message": "I don\u0027t like relying on std::string\u0027s small string optimization because it makes performance characteristics change based on a threshold. The SSO is great for salvaging APIs that would otherwise require heap allocation all the time, but all things being equal, I\u0027d rather just structure the APIs so the allocation discontinuity just doesn\u0027t exist in the first place.",
      "parentUuid": "3f9ad09d_c8bc6654",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ea02347_8431d1fe",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-06T19:43:19Z",
      "side": 1,
      "message": "Also, even *with* SSO, an std::string parameter requires that a caller that doesn\u0027t have an std::string around already copy the string characters into an std::string on the stack, pass the address of the std::string, and then have the callee copy those characters out of the string object. If you pass a string_view or a const char*, you just pass the string contents you already happen to have, which is a win on both code size and latency --- not a huge one, granted, but still.",
      "parentUuid": "011d7488_aa1cef71",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1594aadf_e8d25d28",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:50:10Z",
      "side": 1,
      "message": "\u003e I don\u0027t like relying on std::string\u0027s small string optimization because it makes performance characteristics change based on a threshold...\n\nFair point.\n\nIt still diverges a bit from the easy of use aspects that libbase is trying for.  We mostly created GetProperty() to simplify the libc API for the majority of people who are going to end up reading the property into a string before using it anyway.  Or, worse, people who\u0027re going to read it into a fixed length buffer and can potentially overflow.\n\nIf people really need the performance and are going to use the callback to do something other than just reading into a std::string; there\u0027s already __system_property_find() and __system_property_read_callback() that besides the slight bit of host support, do the same as FindProperty() / GetPropertyWithCallback().\n\nIn any case, let\u0027s chat about that in a bit.\n\n\u003e Also, even *with* SSO, an std::string parameter requires ...\n\nTrue; I\u0027m mostly talking about the output.  string_view input parameters sound good to me.",
      "parentUuid": "011d7488_aa1cef71",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e483717_8d9c76ef",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:18:05Z",
      "side": 1,
      "message": "callback isn\u0027t invoked multiple times in the current code or after aosp/1159432 from what I can tell.",
      "range": {
        "startLine": 49,
        "startChar": 3,
        "endLine": 51,
        "endChar": 41
      },
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c94db3_6962417f",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-06T19:32:00Z",
      "side": 1,
      "message": "I\u0027m describing the contract, not the implementation. This contract gives us the flexibility to invoke the callback multiple times if we want.",
      "parentUuid": "8e483717_8d9c76ef",
      "range": {
        "startLine": 49,
        "startChar": 3,
        "endLine": 51,
        "endChar": 41
      },
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59e3f4bf_ab06d9aa",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:50:10Z",
      "side": 1,
      "message": "But why put that in the contract?  Or characterize it by being \u0027unlikely\u0027 ?  I don\u0027t think it\u0027d be a hard restriction to impose on us to only call the callback once.",
      "parentUuid": "92c94db3_6962417f",
      "range": {
        "startLine": 49,
        "startChar": 3,
        "endLine": 51,
        "endChar": 41
      },
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6e33904_3b5f09ed",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:18:05Z",
      "side": 1,
      "message": "I thought none of them allowed a null PropertyHandle ?  At least the handle_must_not_be_null implies that.  GetBoolProperty() uses handle_must_not_be_null in the implementation just not in the header.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ace15ef2_086ae02f",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-06T19:32:00Z",
      "side": 1,
      "message": "Stale comment. I changed my mind about NULL handle values and forgot to update the comment. Thanks for spotting it!",
      "parentUuid": "a6e33904_3b5f09ed",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "446824df_1ee73b04",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-11-06T19:18:05Z",
      "side": 1,
      "message": "I\u0027d be interested in seeing how many places would make sure of this.  CachedProperty seems like a better option; assuming most properties do not change often, then we would skip the parsing during each call as well.",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c6a3f7_48030e02",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-06T19:32:00Z",
      "side": 1,
      "message": "CachedProperty required synchronization among readers and an extra copy. A direct interface that, say, reads an int can be maximally efficient.",
      "parentUuid": "446824df_1ee73b04",
      "revId": "c454406073fcb0d5ebcadead88c70082f2467740",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}