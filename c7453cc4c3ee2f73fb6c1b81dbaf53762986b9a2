{
  "comments": [
    {
      "key": {
        "uuid": "82ce65a5_5d8a00dd",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-11-18T20:49:11Z",
      "side": 1,
      "message": "why bother? anyone who wants to set errno can just use the boolean return...",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8ecb52a_add71dd5",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-18T21:26:30Z",
      "side": 1,
      "message": "Because that\u0027s what ParseInt does. I wouldn\u0027t bother either, but I\u0027d rather be consistent than minimal.",
      "parentUuid": "82ce65a5_5d8a00dd",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b56e8f57_eeef360b",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-11-18T21:41:46Z",
      "side": 1,
      "message": "ParseInt has multiple errors to report, ParseBool doesn\u0027t. messing with errno in ParseBool just adds confusion to the API.",
      "parentUuid": "a8ecb52a_add71dd5",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ca3234_55cbac6d",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-18T21:43:53Z",
      "side": 1,
      "message": "No, it makes the API work like ParseInt. What adds confusion is a discontinuity at N\u003d1. malloc sets ENOMEM on failure even though it can fail only one way.",
      "parentUuid": "b56e8f57_eeef360b",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03699ba7_aa8f0313",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-11-18T22:00:44Z",
      "side": 1,
      "message": "this is not libc.\n\nthis is bad API especially given the typical \"errno is untouched\" behavior: it\u0027s way more expensive to manually set errno to 0 before the call and test it afterwards. we should just leave errno alone here.\n\n(this is also a false analogy with ParseInt. they\u0027re not really related, any more than ParseNetAddress, which also doesn\u0027t set errno.)",
      "parentUuid": "91ca3234_55cbac6d",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36e31c10_a6278c0d",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-18T22:11:44Z",
      "side": 1,
      "message": "Imagine you\u0027re building a type-based dispatcher that calls ParseInt or ParseUInt depending on type. You can imagine checking errno for errno in this case to detect errors: maybe that\u0027s a good idea, maybe not, but it adheres to the contract, so your errno-checking dispatch engine works. Suppose you want to add support for parsing bools: you see that there\u0027s a ParseBool and add a case for it that\u0027s just like the others. The ParseBool code appears to work fine, but one day, someone tries to parse \"asdfasf\" as a bool and you don\u0027t detect the resulting error because ParseBool, unlike ParseInt, doesn\u0027t set errno on failure. The result is a preventable bug. If I could do libbase from scratch, I wouldn\u0027t have any of these functions set errno, but having one of these functions set errno and the others not increases the likelihood of bugs for no gain --- it\u0027s not as if setting errno has any real cost. At least ParseNotAddress has an explicit error-output parameter.",
      "parentUuid": "03699ba7_aa8f0313",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7242e38_2df90d4f",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-11-18T22:44:22Z",
      "side": 1,
      "message": "but this is a problem inherent in having a bool return type and a bool* out parameter. setting errno doesn\u0027t help. (and if anything encourages people to make the more common mistake of checking errno without setting it to 0 first.)\n\nthe more we talk about this, the less certain i am that this should be in libbase at all... it\u0027s already a fairly unpleasant random hack, and now we\u0027re struggling to write a safe API for it...\n\nmaybe the least worst API if we expose this in libbase would be to have the return value be the parsed bool, and take a bool default to return on failure (more like the existing GetBoolProperty API)?\n\nor just accept that copy \u0026 paste isn\u0027t actually the worst option here! (because it keeps a historical mistake an implementation detail rather than promoting it to an API.)",
      "parentUuid": "36e31c10_a6278c0d",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "498f9ea6_6f894851",
        "filename": "base/include/android-base/parsebool.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-11-18T22:54:59Z",
      "side": 1,
      "message": "Can we please not bikeshed on this? If it is an unpleasant random hack, it should be in one place, because it\u0027s extremely unpleasant and error-prone to be able to use \"yes\" in one spot but be limited to \"y\" or \"1\" in another, which is what we\u0027ll get if everyone has a different idea about the right vocabulary. The problem with returning the parsed bool is that we have to pick a value for the parsed bool to return in the error case.\n\nHow about this then?\n\nenum class ParseBoolResult {\n  ERROR,\n  FALSE,\n  TRUE,\n};\n\nParseBoolResult ParseBool(const char* value);\n\nThis way, we have no default bool conversion problem, no out parameters, and no bug-prone default.",
      "parentUuid": "b7242e38_2df90d4f",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 45,
        "endChar": 26
      },
      "revId": "c7453cc4c3ee2f73fb6c1b81dbaf53762986b9a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}