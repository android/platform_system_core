{
  "comments": [
    {
      "key": {
        "uuid": "046f1830_c535fe8b",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-01-14T13:17:46Z",
      "side": 1,
      "message": "Can I assume top-app will always be present ? The uclamp attributes are not exposed at the root group level, so I need to go check in a subgroup. An alternative would be to look at the kernel config, but that sounds a lot more complicated ...",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f92a0b1_26efff84",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-01-15T05:00:10Z",
      "side": 1,
      "message": "I would prefer if we don\u0027t make such assumptions. The hierarchy can change in the future.\n\nWhy a check for IsUsable() is not enough here? IsUsable() should be the indicator of cgroup being usable, so it\u0027s not the case we should fix IsUsable() instead.\n\nBy checking for that file are you trying to ensure that cpu controller was mounted correctly? If so we have a better way to do that: https://cs.corp.google.com/android/system/core/libprocessgroup/cgrouprc/include/android/cgrouprc.h?type\u003dcs\u0026g\u003d0\u0026l\u003d71. I had a patch that exposed ACgroupController_getFlags() function but it was revert at the time because it was too late for Q to change LLNDK. Maybe it\u0027s time to revive it. This is the patch that reverted it: aosp/981803",
      "parentUuid": "046f1830_c535fe8b",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b963f4d1_5baf48ad",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-01-15T10:07:37Z",
      "side": 1,
      "message": "Well my problem is, we could have the cpu controller mounted but uclamp could still be disabled. They\u0027re orthogonal. And I don\u0027t think cpuctl\u0027s IsUsable() should fail if uclamp is disabled, using the cpuctl \u0027alone\u0027 is a reasonable use-case too.\n\nSo, I need to check that the cpuctl is mounted AND that it has uclamp. I agree that looking into the top-app folder isn\u0027t great, but I had no better suggestion. The only other idea I had was to check CONFIG_UCLAMP_TASK_GROUP in the kernel config, but I have no guarantee the config is exposed by the kernel to userspace ... Unless we can find a way to ensure the device is running with GKI, so we can hard-rely on UCLAMP being enabled in the Kconfig. But I\u0027m not sure if this is feasible, though.\n\nThoughts ?",
      "parentUuid": "1f92a0b1_26efff84",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5f8c581_8615adf2",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-01-15T17:37:51Z",
      "side": 1,
      "message": "I think we can require CONFIG_UCLAMP_TASK_GROUP | CONFIG_SCHED_TUNE using VTS tests. Alistair would know more about how to set it up.\n\n\nAnother less desirable option (this would require new library to be linked) is to use Vintf library to determine if the config flag is set. See example here: https://android-review.googlesource.com/c/platform/frameworks/base/+/1194228/3/core/jni/android_os_Debug.cpp#847",
      "parentUuid": "b963f4d1_5baf48ad",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6466b50_58a3ef95",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-01-15T19:15:10Z",
      "side": 1,
      "message": "Alistair told me there is a way to check such conditions. There is a VTS test and it uses https://android.googlesource.com/kernel/configs/%2B/refs/heads/master/android-5.4/android-base-conditional.xml to define the rules. Yifan implemented this, so please check with him.",
      "parentUuid": "c5f8c581_8615adf2",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b108873_4371cbad",
        "filename": "libprocessgroup/sched_policy.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-01-17T13:54:58Z",
      "side": 1,
      "message": "Sounds promising ! Thanks for the link, I\u0027ll go have a look.",
      "parentUuid": "c6466b50_58a3ef95",
      "range": {
        "startLine": 149,
        "startChar": 67,
        "endLine": 149,
        "endChar": 74
      },
      "revId": "b8f6040939383f77f5a6ed7a5a95d9ad3e25aa59",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}