{
  "comments": [
    {
      "key": {
        "uuid": "cf49026c_51a306de",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Better to move these to right before they\u0027re first used.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9444bbd_14e09072",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "ReadFileToString() ?",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 95,
        "endChar": 18
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca50c47_8e90751b",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "clang-format didn\u0027t complain here?  \u0027*\u0027 goes with the type.  You can/should declare both when they\u0027re initialized too,\n\n    char* pos_start \u003d strstr(buf, cg_tag.c_str());\n    if (pos_start \u003d\u003d nullptr) {\n        return false;\n    }\n\n    pos_start +\u003d cg_tag.length() + 1;  // skip \u0027/\u0027\n    char* pos_end \u003d strchr(pos_start, \u0027\\n\u0027);\n    if (pos_end !\u003d nullptr) {\n        *pos_end \u003d \u0027\\0\u0027;\n    }",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3aeb28d_20199d53",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 134,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-21T16:52:08Z",
      "side": 1,
      "message": "It seems that both ReplaceAll() and ExpandAppDependentPath() are not really used apart from this function.\n\nThus, I think we can get rid of both both in favour of a simpler and inline lambda here:\n\n\n   std::string CgroupController::GetProcsFilePath(const std::string\u0026 path, uid_t uid,\n                                                  pid_t pid) const {\n        auto expandAndAppend \u003d [](const std::string\u0026 cg_path,\n\t\t\tconst std::string\u0026 subgrp,\n\t\t\tuid_t uid, pid_t pid) {\n\t\tstring proc_path(cg_path);\n\n\t\tproc_path.append(\"/\").append(subgrp);\n\n\t\tproc_path \u003d regex_replace(proc_path, std::regex(\"\u003cuid\u003e\"), to_string(uid));\n\t\tproc_path \u003d regex_replace(proc_path, std::regex(\"\u003cpid\u003e\"), to_string(pid));\n\t\treturn proc_path;\n\t};\n\n        return expandAndAppend(path_, path, uid, pid).append(CGROUP_PROCS_FILE);",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 134,
        "endChar": 75
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "836de2b4_1048e0f4",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 134,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-21T19:49:28Z",
      "side": 1,
      "message": "True; or even just drop the lambda and call the regex_replace() directly?",
      "parentUuid": "d3aeb28d_20199d53",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 134,
        "endChar": 75
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d492ede7_083b3f76",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Glad to see the Fstab parsing code helps here!",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a09ece79_b25736a7",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 255,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Better to declare and initialize this inline, especially if it has a constructor instead of its Init function.  You can even just have below:\n\ncd_detected[name] \u003d CgroupController(1, name, entry.mount_point);",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef9d5cc4_534d5da6",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 259,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Don\u0027t declare variable ahead of time; declare them when they\u0027re first initialized.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a1b6c83_464ff011",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 282,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "There\u0027ll never be multiple different cg2_path\u0027s ?",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57bab1ba_f5d2b8df",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 282,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-22T23:07:25Z",
      "side": 1,
      "message": "Nope. Signle hierarchy only for cgroup v2.",
      "parentUuid": "9a1b6c83_464ff011",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39e642b8_57e395b4",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 291,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "How big is this file going to be?  If it\u0027s not too big, probably better to use the android-base functions here, something like:\n\nstd::string contents;\nReadFileToString(cg2_path + \"/cgroup.controllers\", \u0026contents);\nfor (const auto\u0026 line : Split(contents)) {\n  cd_detected[line] \u003d CgroupController(2, CGROUPV2_DEF_NAME, cg2_path);",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "168ab7d7_8eca4ddf",
        "filename": "libprocessgroup/cgroup_map.cpp",
        "patchSetId": 7
      },
      "lineNbr": 291,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-22T23:07:25Z",
      "side": 1,
      "message": "Yes. The file should be rather small. Will do.",
      "parentUuid": "39e642b8_57e395b4",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ec42585_5bfec39d",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "+1 to the other comment: especially if this isn\u0027t a singleton, this should be in a constructor and not as a separate Init() function.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e97a3e66_ffa7196a",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "We tend to name accessors like their variables, so uint32_t version() const { return version_; }\n\nhttps://google.github.io/styleguide/cppguide.html#Function_Names",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 32,
        "endChar": 49
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b5f9420_cd2b4a9c",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "There\u0027s no reason for these to be static of this class either.  They\u0027re better as static functions in cgroup_map.cpp.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d955e7b6_c9c764c0",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "We use pointers for in/out parameters.\n\nhttps://google.github.io/styleguide/cppguide.html#Reference_Arguments",
      "range": {
        "startLine": 46,
        "startChar": 27,
        "endLine": 46,
        "endChar": 43
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4defdc_ebb9e922",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-21T16:52:08Z",
      "side": 1,
      "message": "Since it\u0027s private and static... used only from ExpandAndAppendPath... they could be just private methods (not static). Even better, maybe have a look at my comment on GetProcsFilePath().",
      "parentUuid": "6b5f9420_cd2b4a9c",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83b50500_b777f831",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Maybe better to not have this in the class then?  You could have a separate set of functions specifically for init that write the map (probably in a new header even), then have this class clean for the majority of users.\n\nI\u0027m guessing that part of the reason to not do that is since you\u0027d then need init to both write the map and read in the map, but I think that\u0027s fine overall.  Then there\u0027s the issue of calling Detect more often, but I still think it\u0027s better to have a requirement that they\u0027re all mounted by a certain time.\n\nOr better, could task_profiles.json be expanded to contain the cgroup controllers and paths?  Maybe it\u0027d be worth it to remove the `mount` commands from the init scripts and put it all in here, such that you\u0027d be sure that everything would be mounted correctly (since you\u0027d be doing it).  If we continue down that rabbit hole, then we can even remove all of the detection code, since we\u0027d already know where we mounted things.\n\nThoughts?",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8eaa7cc2_c4b78094",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-21T17:14:08Z",
      "side": 1,
      "message": "Right, I was also considering the idea to remove cgroup dependencies from init scripts.\n\nI guess the main issue is that we currently configure default values for their attributes and further tune them on late init. All that code, in principle, should be provided by this abstraction layer with a configuration described in JSON files.\n\nHowever, that will be a lot more coding and my understanding is that we are aiming here at a very first step which focuses just on getting rid of hardcoded paths from other AOSP translation units... init scripts are thus still kind-of acceptable.",
      "parentUuid": "83b50500_b777f831",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db492fa9_ea7123cd",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-21T19:49:28Z",
      "side": 1,
      "message": "The further tuning is creation of the various directories within the cgroup mounts and tuning the parameters, right?  The Detect() code is only called during mounts which are all set up pretty early, so I think it wouldn\u0027t be too difficult to move the mounting of cgroups into libprocessgroups within this CL and remove the Detect() logic.  I honestly think it may be less overall code, and it would definitely be less complex.\n\nUpon looking at the CLs, it doesn\u0027t make a lot of sense to me that task_profiles.json references \"background/cpus\", \"top-app/cpus\", etc, but it leave the responsibility of creating those directories to the init scripts.  I\u0027d agree that might not be something we have time to address in this CL, but it is something we should revisit in the design doc.  Moving all of the cgroup set up to this library, instead of relying on the init scripts would be a great move forward.",
      "parentUuid": "8eaa7cc2_c4b78094",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af609c76_2f298504",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-22T23:07:25Z",
      "side": 1,
      "message": "That\u0027s a very good idea. init script I think will still have to somehow tell libprocessgroup when to mount all the cgroup controllers. So we still need some API between init and libprocessgroup. Don\u0027t we?",
      "parentUuid": "db492fa9_ea7123cd",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "920fe1be_46ef3553",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-23T00:57:42Z",
      "side": 1,
      "message": "Agreed, but it would be a much more simple API.  A single call to mount and set up the cgroup controllers, instead of the multiple calls to Detect() now.",
      "parentUuid": "af609c76_2f298504",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "311fcce2_cb77ae79",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-23T17:25:06Z",
      "side": 1,
      "message": "Do we really need to get an input from init scripts to mount the controllers?\n\nIf we have the controllers mounting code as part of the ctor, the very first client using CGroupMap will automatically trigger all the mounting. Should not that just work?",
      "parentUuid": "920fe1be_46ef3553",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29eafb02_28c4f894",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-23T17:29:14Z",
      "side": 1,
      "message": "I\u0027d much rather we had it happen at a deterministic time; that\u0027ll be just as easy to implement and would minimize risks in the future if that first client moves around.",
      "parentUuid": "311fcce2_cb77ae79",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ae266a9_cafcf51d",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-23T17:41:51Z",
      "side": 1,
      "message": "I looked into init implementation and I think I can mount all cgroups right before the early-init. One downside is that now it will be a mixture of task_profiles.json and init.rc statements that mount cgroups and then create subgroups. Ideally all that would happen in the JSON file but I won\u0027t have time to take that stab this time around.\nAlso task_profiles.json would probably have to change into cgroups.json as it contains the list of cgroup controllers now.",
      "parentUuid": "29eafb02_28c4f894",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9583220e_b7c048a3",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-23T17:48:57Z",
      "side": 1,
      "message": "Probably better to do that now and have a single call to Detect(), then move all of the mounting and configuration of cgroups into a cgroups.json in a subsequent CL.",
      "parentUuid": "3ae266a9_cafcf51d",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf99d92_5fe97cba",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1119068
      },
      "writtenOn": "2019-01-23T17:52:21Z",
      "side": 1,
      "message": "@Tom: fair point!\n\n@Suren: cannot we use different JSON files?\n\nA new cgroups.json only for mount points, which probably could save the caching mechanism you have now. It should be easy to parse/load all the mountpoints and check if there are already mounted once a new CGroupMap is created.\n\nThe task_profiles.json will be dedicated to task profiles only. At the end they will also be more clean files to work with.",
      "parentUuid": "3ae266a9_cafcf51d",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97fff085_c402a231",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-23T17:55:55Z",
      "side": 1,
      "message": "@Patrick. That\u0027s a good point even though it requires more fiddling with sepolicy. As a result we can restrict access to cgroups.json to init process only and task_profiles.json to all the users. This will prevent anyone other than init from using the Detect API. Good idea!",
      "parentUuid": "9bf99d92_5fe97cba",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734de4a6_47f1473c",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-23T18:02:44Z",
      "side": 1,
      "message": "@Tom. Since init will be the only one now accessing cgroups.json should I place it under /etc/init/ while task_profiles.json is under /etc/? Or keep them both in /etc/?",
      "parentUuid": "97fff085_c402a231",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86916988_8f58d95a",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "controller\u0027 ?\n\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules",
      "range": {
        "startLine": 71,
        "startChar": 25,
        "endLine": 71,
        "endChar": 30
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa4d3c4b_48729a38",
        "filename": "libprocessgroup/cgroup_map.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Remove comment now that it\u0027s CgroupFile ?",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3683d37f_8c857dfb",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "I see this code is just copied from the old libcutils, but probably a good idea to modernize it here.  Either call itoa, or even better std::to_string(tid) as that\u0027s the cleanest.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45788b4e_7dde95ad",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "No C style comments.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ada3db_c22f6354",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-01-22T23:07:25Z",
      "side": 1,
      "message": "Ok. I was trying to minimize the delta from the original implementation but maybe it\u0027s time for this cleanup. Will do.",
      "parentUuid": "45788b4e_7dde95ad",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9918195e_d9c6f8f6",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-23T00:57:42Z",
      "side": 1,
      "message": "I usually always update comments to C++ style, NULL-\u003enullptr, etc.  But this whole function is in pretty big need of just re-writing now I think given my above and below comments too.",
      "parentUuid": "a5ada3db_c22f6354",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae919eed_f08e2689",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 7
      },
      "lineNbr": 166,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-23T00:57:42Z",
      "side": 1,
      "message": "Even this, I\u0027m just noticing is wrong too; it\u0027s already PLOG, so there\u0027s no need to report errno again.",
      "range": {
        "startLine": 166,
        "startChar": 76,
        "endLine": 166,
        "endChar": 91
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc07b1e_143c48b4",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Either pass this by const\u0026 or pass it by value and std::move() it into file_name_.  (Also, probably better to call it file_name).",
      "range": {
        "startLine": 30,
        "startChar": 48,
        "endLine": 30,
        "endChar": 68
      },
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91cf69fc_8eca26aa",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Same comment above about accessors: controller() and file_name()",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f9de472_9e05d315",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Better int boost, int clamp, especially for this header, and etc down below.",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b13e81_a4f08950",
        "filename": "libprocessgroup/task_profiles.h",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-19T03:01:14Z",
      "side": 1,
      "message": "Glad to see how well the unique_ptr works with everything!",
      "revId": "563160728b3f011888001722d9f34d07d47e69b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}